{"searchDocs":[{"title":"Adding articles and updating the structure.","type":0,"sectionRef":"#","url":"/SFITDelivery-KnowledgeHub/blog/git-and-roles-and-structure","content":"The portal structure has been modified for easier navigation. Articles on Roles and Git Management, including descriptions of strategies and comparisons, have been added. Articles on other topics are currently being created.","keywords":"","version":null},{"title":"The release management section has been updated.","type":0,"sectionRef":"#","url":"/SFITDelivery-KnowledgeHub/blog/release_management_section_added","content":"Basic articles have been added to the release management section. The articles contain information on methodology and practical advice on release management, with a separate note dedicated to HotFix. Anti-patterns can help conduct a quick, superficial review of the project's release management processes, allowing for the identification of common mistakes and shortcomings.","keywords":"","version":null},{"title":"Welcome","type":0,"sectionRef":"#","url":"/SFITDelivery-KnowledgeHub/blog/welcome","content":"DevOps and Delivery practices are underdeveloped in Salesforce projects. Small projects often do not integrate these roles with the existing ones on the project, such as developers. Large projects turn to off-the-shelf products. All of this leads to suboptimal solutions, or pitfalls laid at the foundation of the project. This resource is created for sharing and accumulating experience and best DevOps and Delivery practices within Salesforce and cross-projects. Here, you will find documentation and technical solutions. Please feel free to propose your changes/solutions/edits - this is an open project. Let's make this world a better place!","keywords":"","version":null},{"title":"Automatization Index","type":0,"sectionRef":"#","url":"/SFITDelivery-KnowledgeHub/docs/Automatization/","content":"Automatization Index","keywords":"","version":"Next"},{"title":"DevOps and Delivery Management Knowledge Hub for Salesforce","type":0,"sectionRef":"#","url":"/SFITDelivery-KnowledgeHub/docs/intro","content":"","keywords":"","version":"Next"},{"title":"Introduction​","type":1,"pageTitle":"DevOps and Delivery Management Knowledge Hub for Salesforce","url":"/SFITDelivery-KnowledgeHub/docs/intro#introduction","content":" Welcome to the DevOps and Delivery Management Knowledge Hub for Salesforce – an open-source repository dedicated to providing DevOps solutions, delivery management practices, and best practices specifically tailored for Salesforce environments. This knowledge base is a comprehensive resource for DevOps professionals, Delivery Managers, and anyone working with Salesforce, offering a rich compilation of code templates, best practices, and community-contributed insights.  ","version":"Next","tagName":"h2"},{"title":"About the Project​","type":1,"pageTitle":"DevOps and Delivery Management Knowledge Hub for Salesforce","url":"/SFITDelivery-KnowledgeHub/docs/intro#about-the-project","content":" Our mission is to create a centralized, community-driven repository that empowers Salesforce DevOps professionals and Delivery Managers with practical, up-to-date, and versatile resources. The knowledge base includes, but is not limited to:  Code Templates: Ready-to-use scripts and code snippets that facilitate quick and efficient Salesforce development and deployment.Best Practices: Curated methodologies and strategies for optimizing Salesforce DevOps and delivery management processes.Community Contributions: Contributions from experts and practitioners in the field, enriching the repository with diverse perspectives and innovative solutions. ","version":"Next","tagName":"h2"},{"title":"Release Management","type":0,"sectionRef":"#","url":"/SFITDelivery-KnowledgeHub/docs/Management/02_01_Release/02_01_01_Release_Management","content":"","keywords":"","version":"Next"},{"title":"What is Release Management?​","type":1,"pageTitle":"Release Management","url":"/SFITDelivery-KnowledgeHub/docs/Management/02_01_Release/02_01_01_Release_Management#what-is-release-management","content":" Release management is the process of planning, coordinating, and managing software releases, from development and testing to deployment in production. In the context of Salesforce, release management involves overseeing all changes within the platform, whether they are new features, bug fixes, configuration updates, or integrations.  ","version":"Next","tagName":"h3"},{"title":"Why is Release Management Important?​","type":1,"pageTitle":"Release Management","url":"/SFITDelivery-KnowledgeHub/docs/Management/02_01_Release/02_01_01_Release_Management#why-is-release-management-important","content":" System Stability and Reliability:Release management helps ensure the system’s stability by preventing the introduction of errors and failures. This is particularly crucial in large releases, where multiple changes can impact critical business processes. Risk Minimization:Every release carries certain risks. Release management helps minimize these risks through careful planning, testing, and quality control at all stages of the release process. Team Coordination:In large projects involving multiple teams, release management helps coordinate their actions to avoid conflicts and ensure consistency in changes. Quality Assurance:Release management enables a systematic approach to testing and validating changes, helping to maintain a high level of quality in deployed updates. Flexibility and Scalability:In a fast-changing business environment, release management ensures the ability to respond quickly and flexibly to changes, deploying new features as they become ready.  ","version":"Next","tagName":"h3"},{"title":"Key Responsibilities of Release Management​","type":1,"pageTitle":"Release Management","url":"/SFITDelivery-KnowledgeHub/docs/Management/02_01_Release/02_01_01_Release_Management#key-responsibilities-of-release-management","content":" Release Planning:Defining the release schedule, distributing tasks among teams, and aligning with stakeholders. Planning includes risk analysis, impact assessment of changes, and preparation for potential issues. Testing and Validation:Comprehensive testing must be conducted before each release to ensure that changes do not cause system disruptions. In Salesforce, Sandbox environments are used to test changes in an isolated setting. Deployment of Changes:This stage involves deploying changes to production. Depending on the complexity and criticality of the release, various deployment strategies may be used. Monitoring and Feedback:After a release, it is important to monitor how the changes affect the system and collect feedback from users. This helps quickly address potential issues and make adjustments in subsequent releases. Incident Management:In case of issues in production, release management includes clear rollback procedures and incident resolution. Accelerating Delivery:Optimizing the process of delivering new features for the fastest deployment of changes needed by the business.  ","version":"Next","tagName":"h3"},{"title":"The Role of a Release Manager​","type":1,"pageTitle":"Release Management","url":"/SFITDelivery-KnowledgeHub/docs/Management/02_01_Release/02_01_01_Release_Management#the-role-of-a-release-manager","content":" The release manager is a key role responsible for the successful implementation of changes in the system. The responsibilities of this role include:  Coordination: The release manager coordinates the actions of all participants in the process—developers, testers, administrators, and business analysts.Quality Control: The release manager ensures that quality standards are met at all stages of the release.Communication: A significant part of the release manager’s job is maintaining communication between teams and stakeholders and providing timely updates on the release status.Problem Resolution: In the event of incidents, the release manager organizes their prompt resolution, minimizing impact on the business. ","version":"Next","tagName":"h3"},{"title":"Release on Demand","type":0,"sectionRef":"#","url":"/SFITDelivery-KnowledgeHub/docs/Management/02_01_Release/02_01_03_Release_on_Demand","content":"","keywords":"","version":"Next"},{"title":"What is Release on Demand?​","type":1,"pageTitle":"Release on Demand","url":"/SFITDelivery-KnowledgeHub/docs/Management/02_01_Release/02_01_03_Release_on_Demand#what-is-release-on-demand","content":" Companies typically need to quickly implement new features and fixes to meet user needs and maintain competitiveness. In such conditions, Release on Demand becomes the best solution for implementing changes. This approach allows for the release of changes as they are ready, without waiting for scheduled release cycles, providing the flexibility businesses need and accelerating the delivery of value to users. It enables companies to adapt more quickly to market changes and respond promptly to user requests.  ","version":"Next","tagName":"h3"},{"title":"Anti-patterns","type":0,"sectionRef":"#","url":"/SFITDelivery-KnowledgeHub/docs/Management/02_01_Release/02_01_06_Anti_patterns","content":"Anti-patterns Lack of Unified Release Planning: Teams plan and execute releases independently without a unified roadmap or coordination. Ignoring Risk Assessment: Release planning is done without proper risk assessment or preparation for potential issues. Inadequate Incident Response Preparation: The team lacks a well-defined process for handling incidents, especially critical ones that require urgent attention. Over-Reliance on Manual Processes: Key processes, including testing and deployment, rely heavily on manual steps rather than automation. Poor Dependency Management: Dependencies between different teams and components are not properly managed or communicated. Frequent and Uncontrolled Releases: Releasing updates too frequently without sufficient testing or oversight, often driven by the pressure to deliver features quickly. Insufficient Communication Between Teams: Development teams work in silos with minimal communication, leading to misalignment and duplicated efforts. Failure to Adapt to Project-Specific Needs: Applying a one-size-fits-all release management strategy without considering the specific needs of the project or team.","keywords":"","version":"Next"},{"title":"Implementing Release on Demand - Key Steps​","type":1,"pageTitle":"Release on Demand","url":"/SFITDelivery-KnowledgeHub/docs/Management/02_01_Release/02_01_03_Release_on_Demand#implementing-release-on-demand---key-steps","content":" Implementing Release on Demand requires a well-organized process and appropriate tools.  1. Integration with CI/CD Processes​  Continuous Integration and Continuous Delivery (CI/CD) play a crucial role in implementing Release on Demand. These processes automate the build, testing, and deployment of changes, enabling teams to release new versions faster and more safely.  Key Steps:  Setting up CI/CD tools: Tools like Jenkins, GitHub Actions, GitLab CI, Gearset, or others can automate the build and deployment process. In Salesforce, it's advisable to use Salesforce DX for metadata management and deployments.Automating Testing: Automated testing within the CI/CD pipeline ensures that each change passes all necessary checks before being deployed to production.  2. Release Management with Feature Flags​  Feature Flags are a powerful tool that allows managing the availability of new features independently of the main release. This enables deploying new functionality to production while activating it only for specific users or groups.  How it Works:  Isolation of Changes: New features are implemented using Feature Flags, isolating them from the main code and limiting their impact on users until the decision is made to activate the new functionality.Controlled Activation: Activation or deactivation of features in production is done through configuration settings, without affecting the rest of the code.A/B Testing: Feature Flags are used for A/B testing and analyzing the effectiveness of new features before their full-scale launch.  3. Phased Rollouts​  Phased Rollouts is an approach that allows gradually implementing changes in production, starting with a small group of users. This minimizes risks and allows quickly identifying potential issues.  Steps for Implementation:  Defining User Groups: Start the deployment with a limited group of users, such as internal employees or the most loyal customers.Monitoring and Analysis: Track performance metrics and user feedback at each stage of the rollout to identify and address issues promptly.Gradual Expansion: Increase the number of users with access to the new features as confidence in the stability and quality of the release grows.  4. Rapid Incident Response​  In a Release on Demand scenario, it's crucial to have a clear plan for dealing with incidents. Quick responses and rollback capabilities are key elements of effective risk management.  Key Measures:  System Monitoring: Implement monitoring tools to track key performance and stability metrics.Rollback Plan: Prepare and regularly update a rollback strategy to minimize the impact in case of deployment failures.User Feedback Collection: Regularly gather feedback from users post-release to ensure no new issues have arisen and that users are satisfied with the changes.  ","version":"Next","tagName":"h3"},{"title":"Benefits and Challenges of Release on Demand​","type":1,"pageTitle":"Release on Demand","url":"/SFITDelivery-KnowledgeHub/docs/Management/02_01_Release/02_01_03_Release_on_Demand#benefits-and-challenges-of-release-on-demand","content":" Benefits:​  Flexibility and Speed: Allows releasing new features and fixes as they are ready, accelerating value delivery to users. Increased Competitiveness: Companies using Release on Demand can respond faster to market changes and implement innovations more quickly. Risk Reduction: Gradual rollouts and the use of Feature Flags help minimize risks associated with the sudden introduction of new features.  Challenges:​  Automation Requirements: Successful implementation of Release on Demand requires the adoption and maintenance of CI/CD processes and automated testing, which demands significant effort and resources. Complexity of Management: Frequent releases require strict coordination between teams and effective change management, which can be challenging in large organizations. Increased Responsibility: Frequent releases require the team to be constantly ready to respond quickly to incidents and resolve issues. Increased Development and Testing Complexity with Feature Flags: Implementing Feature Flags requires additional abstractions in the code and their tracking, complicating development. Testing also needs to cover various feature flag settings, making the process more labor-intensive compared to regular development.  ","version":"Next","tagName":"h3"},{"title":"Conclusion​","type":1,"pageTitle":"Release on Demand","url":"/SFITDelivery-KnowledgeHub/docs/Management/02_01_Release/02_01_03_Release_on_Demand#conclusion","content":" Release on Demand is a flexible release management approach that enables companies to deliver value to their users faster, without waiting for scheduled release cycles. This method requires careful process organization, automation, and continuous monitoring, but ultimately, it shortens time-to-market and enhances competitiveness. Implementing Release on Demand can be a significant advantage for companies seeking flexibility and innovation in their business. ","version":"Next","tagName":"h3"},{"title":"Large-scale Projects","type":0,"sectionRef":"#","url":"/SFITDelivery-KnowledgeHub/docs/Management/02_01_Release/02_01_05_Large-scale_Projects","content":"","keywords":"","version":"Next"},{"title":"Features of Large-Scale Projects​","type":1,"pageTitle":"Large-scale Projects","url":"/SFITDelivery-KnowledgeHub/docs/Management/02_01_Release/02_01_05_Large-scale_Projects#features-of-large-scale-projects","content":" Large-scale projects differ from smaller ones in several key parameters:  Multiple teams: Such projects involve multiple teams, each of which may work on its own part of the system or functionality.Diverse line management: In addition to teams working on different parts of the system, teams may report to different structures.Multiple dependencies: Changes made by one team may depend on the work of other teams, complicating the integration and testing process.Different locations and time zones: Often, teams are located in different geographical regions, creating additional coordination challenges.Complex business processes: Large-scale projects often implement complex business processes that require thorough verification and coordination of changes.  ","version":"Next","tagName":"h3"},{"title":"Release Management Strategies in Large-Scale Projects​","type":1,"pageTitle":"Large-scale Projects","url":"/SFITDelivery-KnowledgeHub/docs/Management/02_01_Release/02_01_05_Large-scale_Projects#release-management-strategies-in-large-scale-projects","content":" 1. Unified Release Roadmap​  A release roadmap is a document that covers all key stages and release dates for all teams involved in the project. This allows all teams to see the bigger picture and plan their actions in the context of other teams' work.  Key Elements:  Common goal: The roadmap should reflect the project's ultimate goals and show how each team's work contributes to achieving these goals.Important milestones: Key dates and milestones on the roadmap should be available to all team members so that all stakeholders can track progress and make timely adjustments.Dependencies: It is essential to indicate all dependencies between teams and key integration points to minimize the risk of conflicts and delays.  2. Implementation of a Task Management System​  To manage tasks and coordinate actions between teams, it is necessary to use modern project management tools such as Jira, Asana, or others. These systems help track task progress, manage dependencies, and ensure transparency of all processes. Task management systems can also support integration with Git repositories.  Main Functions:  Task tracker: Creation, assignment, and tracking of tasks with clear deadlines and responsible parties.Dependency management: Using built-in features to manage dependencies, allowing visualization and management of connections between tasks from different teams.Task complexity assessment: Task management systems support various tools for assessing task complexity, helping teams determine their capacity, which improves the reliability of release forecasting.Reports and analytics: Regular progress reports help track task completion and identify potential issues in time.Integration with Git repositories: Integration allows for easy mapping of tasks to changes made in Git, minimizing the risk of untracked changes and ensuring reliable release deployment.  3. Regular Meetings and Team Synchronization​  In large projects, it is crucial to maintain regular communication between all teams. This helps to identify problems promptly, share information, and coordinate actions.  Possible Meeting Types:  Daily stand-ups: Brief team meetings to discuss current tasks and obstacles.Weekly syncs: More detailed meetings to discuss progress on major milestones and dependencies between teams.Strategic meetings: Periodic leadership-level meetings to assess overall strategy and long-term planning.PI Planning (SAFe link): This is a two-day event where teams plan their contribution to value creation for the next Planning Interval (PI), typically lasting 8-12 weeks. PI Planning takes place at the beginning of each PI and plays a key role in synchronizing all teams and participants within the Agile Release Train (ART).  Other types of meetings may be necessary as well, and their choice should be made wisely. The main requirement is that after the meetings, all teams clearly understand their tasks, deadlines, and the impact of their work on other teams. The meetings may also vary depending on the project management framework used.  4. Dependency Management and Integration​  Dependencies between teams and system components are one of the main challenges in large-scale projects. Ignoring them can lead to significant delays and operational failures.  Dependency Management Strategies:  Modular architecture: Where possible, it is necessary to separate the project into independent modules to minimize the number of dependencies.Integration points: Key integration points, where components from different teams must be defined and, if possible, combined, should be identified. Particular attention should be paid to thorough testing of these points. Integration points can also be a source of conflict between teams and departments if interaction mechanisms and areas of responsibility are not determined in advance.Tools for tracking dependencies: Using specialized tools simplifies the control and management of dependencies.  5. Quality Assurance and Testing​  The quality of releases in large projects is of critical importance. Implementing automated testing and CI/CD processes helps ensure high quality and stability of releases.  Approaches to Quality Assurance:  Test automation: Implementing automated testing significantly reduces the cost of errors. Test automation helps identify issues earlier and speed up the testing cycle.Unified testing environment: Use sandbox environments or other isolated environments for integration testing of all system components before deploying to production.Regression testing: It should be conducted regularly in sandbox environments, and after each release. The goal of regression testing is to ensure that new changes have not disrupted the functionality of existing features.  ","version":"Next","tagName":"h3"},{"title":"Benefits and Challenges of Release Management in Large-Scale Projects​","type":1,"pageTitle":"Large-scale Projects","url":"/SFITDelivery-KnowledgeHub/docs/Management/02_01_Release/02_01_05_Large-scale_Projects#benefits-and-challenges-of-release-management-in-large-scale-projects","content":" Benefits:​  Team synergy: Clear release management helps establish coordinated work among all teams, improving coordination and communication.Managed risks: Proper dependency management and testing help minimize risks associated with implementing changes.Process transparency: Using a task management system and regular meetings ensures transparency of all processes and helps identify and address issues promptly.Improved project atmosphere: Teams have a better understanding of responsibilities and tasks, as well as the goals of the project and the business.Increased predictability: Effective release management makes the process more predictable, which is crucial for the business.  Challenges:​  Complexity of coordination: In large projects with many teams and dependencies, coordination is a challenging task.Difficulties in integration: Integrating different components of the system, worked on by various teams, requires careful planning and testing.Change management: Frequent changes can complicate the release management process, especially if there is no clear change management strategy.  ","version":"Next","tagName":"h3"},{"title":"Conclusion​","type":1,"pageTitle":"Large-scale Projects","url":"/SFITDelivery-KnowledgeHub/docs/Management/02_01_Release/02_01_05_Large-scale_Projects#conclusion","content":" Release management in large-scale projects requires careful coordination, attention to detail, and the use of effective tools and strategies. Proper organization of processes minimizes risks, ensures system stability, and delivers value to users on time. Implementing practices such as creating a unified roadmap, using a task management system, and holding regular meetings helps successfully manage releases even in the most complex and multi-component projects. The right choice of management frameworks can also simplify process management. ","version":"Next","tagName":"h3"},{"title":"Release Planning","type":0,"sectionRef":"#","url":"/SFITDelivery-KnowledgeHub/docs/Management/02_01_Release/02_01_02_Release_Planning","content":"","keywords":"","version":"Next"},{"title":"Objectives of Release Planning​","type":1,"pageTitle":"Release Planning","url":"/SFITDelivery-KnowledgeHub/docs/Management/02_01_Release/02_01_02_Release_Planning#objectives-of-release-planning","content":" Release planning allows you to:  Structure the process of implementing changes.Minimize the risks associated with deployment.Ensure that all tasks are completed within established deadlines.Successfully integrate with necessary systems.  ","version":"Next","tagName":"h3"},{"title":"Key Steps in Release Planning​","type":1,"pageTitle":"Release Planning","url":"/SFITDelivery-KnowledgeHub/docs/Management/02_01_Release/02_01_02_Release_Planning#key-steps-in-release-planning","content":" 1. Defining Release Windows​  A release window is a pre-planned time frame during which a release is deployed. In Salesforce projects, release windows are often determined based on the company’s business cycle or user needs. To minimize the impact on employee workflows, releases may be scheduled during periods of low activity (outside of working hours or on weekends).  Factors to consider when choosing a release window:  Impact on business processes: How will the changes affect current operations? It’s important to choose a time when the potential impact will be minimal.Dependencies on other projects: The release may depend on the completion of other initiatives.Availability of the team: Ensure that all key participants, including developers, testers, and administrators, are available to support the release.Duration of activities: There should be enough time for deploying the release, testing, and applying corrective measures if issues are discovered.  2. Coordination with Stakeholders​  Effective release planning requires close coordination among all project participants. It’s important to establish clear communication channels, define areas of responsibility, and assign accountable personnel, especially for large projects.  Key steps in coordination:  Defining roles and responsibilities: Team members must clearly understand their roles in the release process if they are involved. This includes who is responsible for developer support, testing, deployment, and monitoring.Regular meetings: Holding regular status meetings helps track progress and quickly resolve any issues that arise.Agreeing on deadlines: All participants should agree on the deadlines for their tasks to avoid delays and conflicts during the merge.Assigning a primary communication channel: It’s important to designate a communication channel and ensure it’s accessible to all stakeholders. A good practice is to develop message templates for various stages of release preparation and deployment. It may also be useful to assign separate communication channels for different stages to simplify communication with various groups of stakeholders.  3. Risk Assessment​  Risk assessment is a crucial part of release planning as it helps anticipate potential problems and develop contingency plans.  Factors to consider in risk assessment:  Complexity of changes: The more changes there are, the higher the likelihood of errors.Dependencies: Identifying dependencies ensures the necessary testing of dependent systems and determines additional actions if needed.Code quality: Thorough testing in sandbox environments is essential. Automated tests help identify potential issues early, reducing the cost of errors.Readiness for rollback: Developing a rollback plan in case something goes wrong is a mandatory part of risk management. The rollback should ensure the most reliable and quickest way to return to the previous stable production version.Presence of manual steps: When deploying a release, it’s important to consider the possibility of performing both pre-deployment and post-deployment manual steps. A reliable and understandable system for recording and tracking manual steps is necessary. It’s crucial to automate manual steps as much as possible, especially repetitive tasks.  4. Resource Planning​  Resource planning involves determining the necessary resources for the successful completion of the release, including people, technology, and time.  Key aspects of resource planning:  Team resources: Determine how many people will be needed at each stage of the release and ensure their availability.Tools and technology: Ensure that the team has access to all the necessary tools, technologies, and environments.Timeframes: Break the release into stages and set clear deadlines for each, taking into account potential delays.Communication channels: Using a communication channel for coordinating the actions of employees and stakeholders involved in the release is essential for successful coordination. A clear plan for using the communication channel is also necessary to ensure that information is accessible and correctly distributed among participants.  ","version":"Next","tagName":"h3"},{"title":"Coordinating Releases with Multiple Teams​","type":1,"pageTitle":"Release Planning","url":"/SFITDelivery-KnowledgeHub/docs/Management/02_01_Release/02_01_02_Release_Planning#coordinating-releases-with-multiple-teams","content":" In large projects, several teams are often involved, each responsible for its own scope of tasks. In such conditions, coordination becomes critically important.  Tips for coordination:  Shared roadmap: Create a shared release roadmap so that all teams can see how their work fits into the overall process.Task management system: Use project management systems (e.g., Jira, Trello) to track the progress of each team’s tasks and timely identify potential conflicts.Agreed-upon processes: Ensure that all teams work according to agreed-upon processes, including standard procedures for testing, code review, and deployment.Regular meetings: Regular meetings, for example, between tech leads, help better coordinate actions between development teams and minimize dependency risks.  ","version":"Next","tagName":"h3"},{"title":"Conclusion​","type":1,"pageTitle":"Release Planning","url":"/SFITDelivery-KnowledgeHub/docs/Management/02_01_Release/02_01_02_Release_Planning#conclusion","content":" Release planning is a multifaceted process that requires careful attention and coordination of efforts from all project participants. The success of a release depends on the correct selection of release windows, effective team coordination, thorough risk assessment, and thoughtful resource planning. By following these principles, you can minimize risks, improve release quality, and ensure the stability of the system. Successful release planning contributes to the overall growth and efficiency of the team, enhancing trust in the development and change implementation processes. ","version":"Next","tagName":"h3"},{"title":"Git Flow","type":0,"sectionRef":"#","url":"/SFITDelivery-KnowledgeHub/docs/Management/02_02_Git/02_02_03_Git_Flow","content":"","keywords":"","version":"Next"},{"title":"Implementation Examples​","type":1,"pageTitle":"Git Flow","url":"/SFITDelivery-KnowledgeHub/docs/Management/02_02_Git/02_02_03_Git_Flow#implementation-examples","content":" The most popular scheme for the Git Flow strategy is illustrated below.    ","version":"Next","tagName":"h3"},{"title":"Advantages​","type":1,"pageTitle":"Git Flow","url":"/SFITDelivery-KnowledgeHub/docs/Management/02_02_Git/02_02_03_Git_Flow#advantages","content":" Clear Structure: Git Flow provides a clear and organized branching structure, making development management easier in large teams and complex projects. Parallel Development: Developers can work on different features simultaneously without conflicts by using feature branches. Simplified Release Cycle: Release branches allow thorough testing and preparation of releases, including the latest fixes and metadata, before deploying to production. Effective Hotfix Management: Hotfix branches provide a quick way to fix critical production errors without disrupting the current development cycle. Code Consistency: Back merging hotfix and release branches into the develop branch maintains code consistency. CI/CD Support: The strategy integrates well with continuous integration and deployment practices, ensuring automated testing and deployment.  ","version":"Next","tagName":"h3"},{"title":"Disadvantages​","type":1,"pageTitle":"Git Flow","url":"/SFITDelivery-KnowledgeHub/docs/Management/02_02_Git/02_02_03_Git_Flow#disadvantages","content":" Complexity: For small teams and projects with frequent releases, Git Flow can be overly complex and redundant. Slow Development Cycle: The process of creating and merging branches can slow down the development cycle, especially if quick changes are needed. Additional Overhead: Managing multiple branches requires extra time and effort for synchronization and conflict resolution. Relatively High Learning Curve: New team members may need time to understand and adapt to the Git Flow strategy, especially if they are not familiar with branching and merging concepts.  ","version":"Next","tagName":"h3"},{"title":"Features​","type":1,"pageTitle":"Git Flow","url":"/SFITDelivery-KnowledgeHub/docs/Management/02_02_Git/02_02_03_Git_Flow#features","content":" Git Flow Strategy is flexible, as the time to prepare a release for deployment to production can vary depending on the complexity of the release. The release branch contains only the code for the upcoming release, simplifying the testing process and code control. Regular merges are necessary for branch synchronization, maintaining code consistency. Developers need to switch between branches depending on tasks, requiring discipline and good organization.  ","version":"Next","tagName":"h3"},{"title":"Ideal Project Profile​","type":1,"pageTitle":"Git Flow","url":"/SFITDelivery-KnowledgeHub/docs/Management/02_02_Git/02_02_03_Git_Flow#ideal-project-profile","content":" Large or Medium-Sized Development Team: Git Flow is best suited for projects involving multiple teams or a large number of developers, as it provides a clear structure for branch management and code synchronization. Projects with Regular Releases: If a project requires regular and scheduled releases, Git Flow helps organize the release process, ensuring code stability and quality. Complex Projects with Long Development Cycles: Git Flow is ideal for complex projects where managing numerous features and fixes that can be developed and tested in parallel is necessary. High Quality Control Requirements: Projects requiring thorough testing and quality control before production release benefit from using release branches for preparation. Multiple Environments (development, staging, production): Git Flow makes it easy to manage multiple environments, simplifying deployment and testing processes across different environments. Support for Complex Development and Release Processes: Projects needing quick production error fixes (hotfixes) without disrupting current development also benefit from Git Flow's structure. CI/CD Practices: Projects actively using continuous integration and deployment will find Git Flow useful for automating testing and deployment through a clear branch structure. ","version":"Next","tagName":"h3"},{"title":"Mass Delete Unused Flow and Process Builder Versions in Salesforce","type":0,"sectionRef":"#","url":"/SFITDelivery-KnowledgeHub/docs/Automatization/100_01_delete_flow","content":"","keywords":"","version":"Next"},{"title":"Apex script​","type":1,"pageTitle":"Mass Delete Unused Flow and Process Builder Versions in Salesforce","url":"/SFITDelivery-KnowledgeHub/docs/Automatization/100_01_delete_flow#apex-script","content":" apex script  String soqlQuery = 'Select ID From Flow Where (Status = \\'Obsolete\\' OR Status = \\'Draft\\') AND VersionNumber &gt; 1'; String orgUrl = URL.getSalesforceBaseUrl().toExternalForm(); HttpRequest flowIdRequest = new HttpRequest(); flowIdRequest.setMethod('GET'); flowIdRequest.setHeader('Authorization', 'Bearer ' + UserInfo.getSessionId()); flowIdRequest.setEndpoint(orgUrl+'/services/data/v50.0/tooling/query?q=SELECT+id,status+FROM+Flow+Where+(+Status+=+\\'Obsolete\\'+OR+Status+=+\\'Draft\\'+)+AND+VersionNumber+&gt;+1'); //flowIdRequest.setTimeout(120000); Http http = new Http(); HttpResponse httpResponse = http.send(flowIdRequest); List&lt;Object&gt; records = (List&lt;Object&gt;)((Map&lt;String, Object&gt;)JSON.deserializeUntyped(httpResponse.getBody())).get('records'); //get id String[] ids = new List&lt;String&gt;(); for (Object variable : records) { String str = variable.ToString(); String res = str.substringBefore(', Status'); res = res.substringAfter('Id='); ids.add(res); } //delete HttpRequest flowIdRequestDelete = new HttpRequest(); for (String idFlow : ids) { flowIdRequestDelete.setMethod('DELETE'); flowIdRequestDelete.setHeader('Authorization', 'Bearer ' + UserInfo.getSessionId()); flowIdRequestDelete.setEndpoint(orgUrl +'/services/data/v50.0/tooling/sobjects/Flow/'+idFlow); Http http = new Http(); HttpResponse httpResponseDelete = http.send(flowIdRequestDelete); }   ","version":"Next","tagName":"h2"},{"title":"Bash Script (Using a File):​","type":1,"pageTitle":"Mass Delete Unused Flow and Process Builder Versions in Salesforce","url":"/SFITDelivery-KnowledgeHub/docs/Automatization/100_01_delete_flow#bash-script-using-a-file","content":" apex script  #!/bin/bash org=$1 # sandbox alias verMin=$2 # which version of the flow does the check start with verMaxDelta=$3 # how many versions of the flow will not be deleted counting from the active one # get the active version of the Active flow echo &quot;Request for Active flow versions&quot; mapfile resultActive &lt; &lt;(sfdx force:data:soql:query --query &quot;Select DefinitionId, VersionNumber From Flow Where Status = 'Active' AND VersionNumber &gt; $verMin&quot; --targetusername $org --usetoolingapi) &lt;&lt; RESULT these first two lines are excluded: DEFINITIONID VERSIONNUMBER ────────────────── ───────────── RESULT let &quot;a=${#resultActive[@]}-2&quot; # get the active version of Obsolete and Draft flow echo &quot;Request for Inactive flow versions&quot; mapfile resultInactive &lt; &lt;(sfdx force:data:soql:query --query &quot;Select ID, DefinitionId, VersionNumber From Flow Where (Status = 'Obsolete' OR Status = 'Draft') AND VersionNumber &gt; $verMin &quot; --targetusername $org --usetoolingapi) let &quot;b=${#resultInactive[@]}-2&quot; declare -a flowsArr echo &quot;I'm starting to process the lists&quot; for row in &quot;${resultInactive[@]:2:$b}&quot;;do IFS=' ' read -ra flowInactiv &lt;&lt;&lt; &quot;$row&quot; # we get a string divided into an array - Inactiv flow let &quot;verInactiveFlow = ${flowInactiv[2]}&quot; # the version of the inactive flow to check for value in &quot;${resultActive[@]:2:$a}&quot;;do IFS=' ' read -ra flowActiv &lt;&lt;&lt; &quot;$value&quot; # we get a string divided into an array - Activ flow let &quot;verActiveFlowAndDelta = ${flowActiv[1]} - $verMaxDelta&quot; # the version of the active flow with a delta for checking if [[ &quot;${flowActiv[0]}&quot; = &quot;${flowInactiv[1]}&quot; ]] then if (( $verInactiveFlow &lt; $verActiveFlowAndDelta )) then echo &quot;added for deletion ID &quot; ${flowInactiv[0]} flowsArr+=( ${flowInactiv[0]} ) #add &quot;Select ID&quot; form Inactive flow fi fi done done # Delete flows echo &quot;deletion starts &quot; echo ${#flowsArr[@]} &quot; flows are removed&quot; con=0 for flowDelete in &quot;${flowsArr[@]}&quot;;do con=$((con + 1)) sfdx force:data:record:delete --sobjecttype Flow --sobjectid $flowDelete --targetusername $org --usetoolingapi echo &quot;there are &quot; $((${#flowsArr[@]}-$con)) &quot; flows left&quot; done  ","version":"Next","tagName":"h2"},{"title":"HotFix","type":0,"sectionRef":"#","url":"/SFITDelivery-KnowledgeHub/docs/Management/02_01_Release/02_01_04_HotFix","content":"","keywords":"","version":"Next"},{"title":"What is a Hotfix?​","type":1,"pageTitle":"HotFix","url":"/SFITDelivery-KnowledgeHub/docs/Management/02_01_Release/02_01_04_HotFix#what-is-a-hotfix","content":" A hotfix is an urgent fix for a critical error that has occurred in production and requires immediate resolution. Unlike planned releases, a hotfix is implemented without prior long-term planning and preparation, making the process riskier. However, with proper organization and adherence to a clear plan, a hotfix can be deployed quickly and safely.  ","version":"Next","tagName":"h3"},{"title":"Key Stages of Managing a Hotfix​","type":1,"pageTitle":"HotFix","url":"/SFITDelivery-KnowledgeHub/docs/Management/02_01_Release/02_01_04_HotFix#key-stages-of-managing-a-hotfix","content":" 1. Assessing and Classifying the Problem​  The first step in the hotfix process is to assess and classify the problem. It is necessary to determine how critical the error is and whether it requires immediate intervention. A unified system for tracking, prioritizing, and managing issues should be established within the project.  Key questions for assessment:  Impact on business: How severely does the error affect key business processes? Could it lead to significant financial losses or operational disruptions?Number of affected users: How many users are affected by this issue? Is it an isolated incident or a widespread problem?Availability of a workaround: Is there a temporary solution that can mitigate the issue until a permanent fix is implemented?  2. Rapid Development and Testing of the Fix​  Once the problem is classified, the team must promptly start developing the fix. It is important to minimize the time spent on this stage while ensuring the quality of the solution.  Steps for development and testing:  Isolated development environment: The hotfix should be developed in an isolated environment to avoid impacting other changes or ongoing developments.Minimization of changes: The changes should be minimal to reduce the risk of introducing new errors.Testing: Despite the urgency, it is crucial to conduct all possible tests in a sandbox environment. Automated and regression testing helps identify potential issues early.Use of a production-like environment: The hotfix should be tested in an environment that closely resembles the production environment.  3. Deploying the Hotfix to Production​  When the fix is ready and has passed testing, the next step is deploying it to production. This process requires precise coordination and attention to details.  Steps for deployment:  Rollback strategy: Before deploying the hotfix, it is important to have a strategy in place for quickly rolling back the changes if unforeseen problems arise.Notifying stakeholders: All key participants should be informed about the upcoming deployment to ensure that stakeholders are prepared for potential system instability.Gradual deployment: Depending on the complexity of the fix, it may be beneficial to deploy it gradually or on a limited scale (e.g., using Canary Releases) to ensure stability.  4. Monitoring and Evaluating Results​  After the hotfix is deployed, it is important to closely monitor the system and evaluate the results of the fix.  Key actions:  System monitoring: Use monitoring tools to track system performance and key metrics. Any deviations from the norm should be analyzed immediately.Collecting user feedback: Promptly gather feedback from users to ensure that the issue is resolved and no new problems have arisen.Incident analysis: After the system stabilizes, conduct an analysis of the incident to identify the root cause and determine how to prevent similar situations in the future.  ","version":"Next","tagName":"h3"},{"title":"How to Minimize Risks When Implementing a Hotfix​","type":1,"pageTitle":"HotFix","url":"/SFITDelivery-KnowledgeHub/docs/Management/02_01_Release/02_01_04_HotFix#how-to-minimize-risks-when-implementing-a-hotfix","content":" Hotfixes always carry certain risks, but proper organization of the process can significantly reduce them.  1. Preparing for Potential Problems​  Rollback plan: Develop a rollback strategy to quickly restore the system to its previous stable state if problems arise.Failure procedures: Developing and documenting procedures for handling failures during the hotfix deployment is an important part of the hotfix process.  2. Automating Processes​  Automated testing: Using automated tests helps reduce testing time and improve its quality.CI/CD processes: Integrating the hotfix into CI/CD processes allows for automated deployment and minimizes the likelihood of errors.Git strategy: It is important that the Git strategy accommodates the possibility of conducting hotfixes in the most efficient way that meets the project’s requirements. Hotfix Git strategy.  3. Regular Drills and Training​  Training deployments: Regularly conduct hotfix drills in a test environment to ensure the team is prepared to act quickly in a real situation.Documentation and training: Ensure that the entire team is familiar with the hotfix management processes and has access to the necessary documentation and tools. It is important to keep the documentation up to date.  ","version":"Next","tagName":"h3"},{"title":"Conclusion​","type":1,"pageTitle":"HotFix","url":"/SFITDelivery-KnowledgeHub/docs/Management/02_01_Release/02_01_04_HotFix#conclusion","content":" Managing hotfixes is a complex but crucial aspect of release management in Salesforce projects. Prompt and safe deployment of urgent fixes requires careful planning, quality testing, and diligent monitoring. By following the steps and recommendations outlined above, you can minimize risks, quickly resolve critical issues, and maintain the stability of your Salesforce system. A well-structured hotfix process and strategy aligned with the project’s conditions contribute to the overall resilience of the system in the long term. ","version":"Next","tagName":"h3"},{"title":"Trunk-Based Development (TBD)","type":0,"sectionRef":"#","url":"/SFITDelivery-KnowledgeHub/docs/Management/02_02_Git/02_02_02_TBD","content":"","keywords":"","version":"Next"},{"title":"Implementation Examples​","type":1,"pageTitle":"Trunk-Based Development (TBD)","url":"/SFITDelivery-KnowledgeHub/docs/Management/02_02_Git/02_02_02_TBD#implementation-examples","content":" The strategy can use feature branches and release branches, but the key feature is a single main branch. The example shows implementation scenarios: 1 - without using additional branches 2 - with feature branches 3 - with feature branches and release branches  ","version":"Next","tagName":"h3"},{"title":"Advantages​","type":1,"pageTitle":"Trunk-Based Development (TBD)","url":"/SFITDelivery-KnowledgeHub/docs/Management/02_02_Git/02_02_02_TBD#advantages","content":" Rapid Issue Identification and Resolution: Frequent commits and configured automation allow for quick detection and resolution of issues, especially integration problems. Simplified Branch Management: The absence of long-lived branches can simplify the code management process, reducing the likelihood of conflicts and merge errors. Improved Code Quality: TBD is accompanied by the automation of CI/CD processes, including testing, which helps maintain a high standard of code quality since each change is automatically verified. Faster Feature Delivery: Frequent releases allow for faster delivery of new features to users, improving time to market and customer satisfaction. Constant Deployment Readiness: The main branch is always in a state ready for production deployment, which simplifies and speeds up the release process. Better Team Interaction: The requirement for frequent commits and merges encourages the team to engage in more active interaction and coordination, improving teamwork. Enhanced Transparency: All changes occur in one branch, making the development process more transparent and accessible to all team members.  ","version":"Next","tagName":"h3"},{"title":"Disadvantages​","type":1,"pageTitle":"Trunk-Based Development (TBD)","url":"/SFITDelivery-KnowledgeHub/docs/Management/02_02_Git/02_02_02_TBD#disadvantages","content":" Scalability Issues: In large teams with many developers, frequent commits to one branch can lead to numerous conflicts and merge complexities. Discipline and Process Requirements: Successful TBD implementation requires high team discipline, well-organized processes, and a culture of continuous integration, which is not always easy to achieve. High Automation Demands: A good CI/CD system for automatic testing and deployment requires significant resources and time for setup and maintenance. Risk of Reduced Code Quality: Fast and frequent integrations can lead to the inclusion of insufficiently tested or low-quality code if the review and testing processes are not strict enough. Potential Performance Issues: Frequent merges can increase the load on the version control system and CI/CD infrastructure, potentially slowing down the integration and deployment process. Limited Experimentation Opportunities: The absence of long-lived branches can limit opportunities for long-term experiments and major changes that require more time for development and testing. Complex Testing: Feature flags are used to ensure that unfinished code does not interfere with the deployment of the main branch, which adds additional testing workload for different system configurations.  ","version":"Next","tagName":"h3"},{"title":"Features​","type":1,"pageTitle":"Trunk-Based Development (TBD)","url":"/SFITDelivery-KnowledgeHub/docs/Management/02_02_Git/02_02_02_TBD#features","content":" Feature FlagsThis development technique allows enabling or disabling features in an application without deploying new code. This is achieved by using conditional statements that check the flag's state and enable or disable the corresponding functionality.  ","version":"Next","tagName":"h3"},{"title":"Ideal Project Profile​","type":1,"pageTitle":"Trunk-Based Development (TBD)","url":"/SFITDelivery-KnowledgeHub/docs/Management/02_02_Git/02_02_02_TBD#ideal-project-profile","content":" Small to Medium Development Team: With a small number of developers, it is easier to coordinate frequent commits and integrations, reducing the risk of conflicts and simplifying branch management. High Level of Automation: A reliable and well-configured continuous integration and deployment (CI/CD) system that automatically performs tests, checks, and deployments is critical for the success of TBD. Culture of Code Quality: The team should adhere to high standards of code quality, regularly conduct code reviews, and ensure thorough testing before committing to the main branch. Effective Interaction and Communication: The team should have well-established communication and interaction processes to quickly address issues and coordinate their actions. Short-Term Tasks: Projects should be broken down into small, manageable tasks that can be completed within a few days or even hours to support frequent commits and integrations. Flexibility and Adaptability: The development process should be flexible and able to quickly adapt to changing requirements and conditions, helping to respond promptly to feedback and make necessary adjustments. Version Control and Monitoring Tools: Use of modern version control tools such as Git, as well as monitoring and performance analysis tools for timely issue detection and resolution. Management Support: Leadership should support the implementation of TBD by providing the necessary resources and creating conditions for the team's effective work. ","version":"Next","tagName":"h3"},{"title":"Copado Branching Strategy","type":0,"sectionRef":"#","url":"/SFITDelivery-KnowledgeHub/docs/Management/02_02_Git/02_02_04_Org_Branch_Copado","content":"","keywords":"","version":"Next"},{"title":"Implementation Examples​","type":1,"pageTitle":"Copado Branching Strategy","url":"/SFITDelivery-KnowledgeHub/docs/Management/02_02_Git/02_02_04_Org_Branch_Copado#implementation-examples","content":" Key implementation features, depicted in the diagram, include feature branches created from the Production branch but containing changes from the Dev environment. Feature branches are created automatically, and Copado allows retrieving changes from selected sandboxes into them. When moving changes to UAT (branch corresponding to the environment), Copado creates a temporary Promotion branch, where selected feature branches can be merged. The merging process is accompanied by validation and deployment of changes to the selected environment. When promoting changes to Production, the process repeats similarly to the promotion of changes to UAT.  The strategy implementation diagram is taken from the official Copado website documentation Link    ","version":"Next","tagName":"h3"},{"title":"Advantages​","type":1,"pageTitle":"Copado Branching Strategy","url":"/SFITDelivery-KnowledgeHub/docs/Management/02_02_Git/02_02_04_Org_Branch_Copado#advantages","content":" Isolation of Changes: Each user story or feature is developed in a separate branch. Branch Automation: Copado automatically creates and manages branches, reducing manual errors and speeding up the development process. Automation also simplifies branch management and the deployment process. Regular Back-promotion: Regular back-promotion support helps synchronize changes between branches, ensuring code consistency and preventing errors. Built-in Quality Gate: Copado includes detailed instructions, recommendations, and tools for integrating quality control into the delivery strategy. Environment-Specific Branches: The strategy includes branches corresponding to environments, making it easy to track code and changes for the respective environment.  ","version":"Next","tagName":"h3"},{"title":"Disadvantages​","type":1,"pageTitle":"Copado Branching Strategy","url":"/SFITDelivery-KnowledgeHub/docs/Management/02_02_Git/02_02_04_Org_Branch_Copado#disadvantages","content":" Management Complexity: Despite automation, managing many branches can be challenging, especially in large projects with many developers. Clear processes must be organized to avoid chaos in branch management. Tracking Changes Complexity: Changes are recorded in a feature branch created from the base branch (usually the Production branch). This approach adds complexity, as changes in commits may not match those made by the developer during extended feature development or with a large number of developers. Merge Conflicts: Despite isolating changes, merge conflicts can still occur. In complex projects, conflicts are common due to the nature of forming commits in the feature branch. Release Formation Complexity with Many Tickets: When moving a large number of tickets after forming a promotion branch from the target branch, feature branches are merged sequentially. This process can be time-consuming and unpredictable when conflicts are present. Training and Adaptation: Effective use of the strategy requires team training and adaptation to new processes, which can take time and additional resources. Tool Dependency: High integration with specific tools can create dependency and complicate the transition to other solutions in the future. Inability to significantly influence Git strategy changes, as it is part of Copado, can cause issues if tools are updated or changed.  ","version":"Next","tagName":"h3"},{"title":"Features​","type":1,"pageTitle":"Copado Branching Strategy","url":"/SFITDelivery-KnowledgeHub/docs/Management/02_02_Git/02_02_04_Org_Branch_Copado#features","content":" Copado Branching Strategy is an integral part of Copado. Copado offers a comprehensive solution and significant automation in managing changes, development processes, and deliveries but requires a careful approach to team training and process organization to achieve maximum efficiency. Release management, automation, and Git strategy are carried out through Salesforce.  ","version":"Next","tagName":"h3"},{"title":"Ideal Project Profile​","type":1,"pageTitle":"Copado Branching Strategy","url":"/SFITDelivery-KnowledgeHub/docs/Management/02_02_Git/02_02_04_Org_Branch_Copado#ideal-project-profile","content":" Small or Medium Projects: Copado is ideal for projects with a limited number of teams or developers, as the complexity of release management increases sharply with more teams and developers. Frequent and Small Releases: Projects requiring frequent and regular releases benefit from using Copado, as it better manages changes and maintains high code quality through centralized management and process automation, minimizing conflicts related to the strategy. High Code Quality and Testing Requirements: Projects where thorough testing and quality control are critical can effectively use Copado's capabilities for test automation. Complex Infrastructure: Projects with multiple development environments (development, staging, production) benefit from centralized change management offered by Copado, simplifying the deployment process and synchronization of changes between different environments. ","version":"Next","tagName":"h3"},{"title":"Parallel Releases","type":0,"sectionRef":"#","url":"/SFITDelivery-KnowledgeHub/docs/Management/02_02_Git/02_02_05_Parallel_Releases","content":"","keywords":"","version":"Next"},{"title":"Implementation Examples​","type":1,"pageTitle":"Parallel Releases","url":"/SFITDelivery-KnowledgeHub/docs/Management/02_02_Git/02_02_05_Parallel_Releases#implementation-examples","content":" The diagram shows two possible implementations of the strategy. Tags display the versioning example of the release on production: major release/minor release/fix.  The first diagram shows an example with three parallel releases. In this implementation, the release order is pre-agreed, but release development can take a long time.The second diagram shows an example with a minor and a major release. The minor release is more frequently deployed to production. The major release can take a long time.    ","version":"Next","tagName":"h3"},{"title":"Advantages​","type":1,"pageTitle":"Parallel Releases","url":"/SFITDelivery-KnowledgeHub/docs/Management/02_02_Git/02_02_05_Parallel_Releases#advantages","content":" Isolation of Changes: Each product version is developed in its separate release branch, minimizing the risk of conflicts and simplifying testing. Support for Multiple Versions: The strategy allows simultaneous support and development of multiple product versions, which is especially useful for long-term projects and products with multiple active versions. Flexibility in Release Management: The ability to work on different releases in parallel allows for more flexible responses to changing requirements and priorities. Simplification of the Release Cycle: Separating branches for different releases simplifies the preparation and testing process before release.  ","version":"Next","tagName":"h3"},{"title":"Disadvantages​","type":1,"pageTitle":"Parallel Releases","url":"/SFITDelivery-KnowledgeHub/docs/Management/02_02_Git/02_02_05_Parallel_Releases#disadvantages","content":" Complexity of Branch Management: Maintaining a large number of branches requires careful planning and is a labor-intensive task. Increased Risk of Conflicts: Although isolation of changes minimizes conflicts, synchronization and frequent merges between branches can still lead to conflicts that require resolution. Increased Overhead: Managing multiple release branches may require more resources and time for synchronization and testing. Need for Strict Discipline: Successful application of the strategy requires the team to strictly follow established processes and branch management rules. Potential Complexity in Testing: Testing changes in multiple parallel branches can be challenging and require additional efforts to ensure code quality.  ","version":"Next","tagName":"h3"},{"title":"Features​","type":1,"pageTitle":"Parallel Releases","url":"/SFITDelivery-KnowledgeHub/docs/Management/02_02_Git/02_02_05_Parallel_Releases#features","content":" A key feature of this strategy is the ability to develop different functionalities in parallel, allowing teams to work on different versions of the product simultaneously. This enables parallel work for a large number of teams and developers, which is especially useful for large and complex projects. Regular synchronizations and merges between branches are necessary to ensure code consistency. This requires a well-constructed release architecture and synchronization process automation. In such strategies, it is important to consider the architectural features of the solutions and ensure that synchronization and merging processes do not disrupt other teams' work. It is also necessary to implement tools for automation and monitoring to simplify the management of multiple parallel branches and minimize the risk of conflicts and errors.  ","version":"Next","tagName":"h3"},{"title":"Ideal Project Profile​","type":1,"pageTitle":"Parallel Releases","url":"/SFITDelivery-KnowledgeHub/docs/Management/02_02_Git/02_02_05_Parallel_Releases#ideal-project-profile","content":" Large or Medium-Sized Development Team: The Parallel Release strategy is especially useful for projects where multiple teams or a large number of developers are working, as it allows them to work on different features and releases simultaneously without interfering with each other. Complex Projects with Long Development Cycles: Projects that require support and development of multiple product versions simultaneously are ideal for this strategy. This includes products with long-term support, where updates and fixes for older versions need to be released while developing new features for future releases. High Requirements for Code Quality and Stability: In projects with parallel releases, it is possible to control code quality more carefully by testing and stabilizing each release branch before merging it into the main branch. This is especially important for projects where code stability and quality are critical. Complex Infrastructure and Multiple Environments: Projects with multiple environments (development, staging, production) benefit from using parallel releases, as this allows managing different product versions and testing them in various environments without interfering with the main development process. Frequent Releases and Updates: Projects that require regular and frequent releases can effectively use this strategy to manage multiple parallel branches, allowing faster responses to changes and release updates. Intensive Integration with CI/CD: Projects that actively use continuous integration and deployment can easily integrate synchronization and testing processes for multiple branches, simplifying the management of parallel releases and improving automation. ","version":"Next","tagName":"h3"},{"title":"Git Strategies","type":0,"sectionRef":"#","url":"/SFITDelivery-KnowledgeHub/docs/Management/02_02_Git/02_02_01_Strategies","content":"","keywords":"","version":"Next"},{"title":"Why Git is Needed​","type":1,"pageTitle":"Git Strategies","url":"/SFITDelivery-KnowledgeHub/docs/Management/02_02_Git/02_02_01_Strategies#why-git-is-needed","content":" Git is necessary for projects for several reasons:  Version Control: Git allows tracking changes in Salesforce code and metadata. This helps restore any previous version of the code if needed and see who made changes and when. Collaboration: Git simplifies collaboration among multiple developers on a single project. Each developer can work on their own branch without interfering with others. Changes can then be merged into the main branch. Code Reviews: Using Git makes organizing and conducting code reviews easy. This helps improve code quality and identify errors at early stages. Deployment Automation: Integrating Git with CI/CD (Continuous Integration / Continuous Deployment) tools automates the deployment and testing process of changes in Salesforce, speeding up the release of new versions and reducing the likelihood of errors. Security and Backup: Storing code in Git ensures its preservation and availability. Even if a local copy of the code is lost, data can always be restored from the repository. Traceability: Git provides the ability to trace change history, understand the reasons and context for changes, which is especially useful for debugging and problem analysis. Working with Multiple Environments: Salesforce projects often use different environments (Dev, Int, UAT, Prod, etc.). Git helps distribute code across these environments according to the release strategy. Integration with Other Tools: Git easily integrates with various project management tools like Jira, Trello, and others, making project management more convenient and structured.  ","version":"Next","tagName":"h2"},{"title":"Why Git Strategies are Needed​","type":1,"pageTitle":"Git Strategies","url":"/SFITDelivery-KnowledgeHub/docs/Management/02_02_Git/02_02_01_Strategies#why-git-strategies-are-needed","content":" An experienced manager entrusted with working with Git should understand Git strategies. An incorrectly chosen Git strategy can lead to several issues such as disruption of production, poor development quality, conflicts between developers, and project failure.  When choosing a Git strategy for a project, several factors need to be considered to ensure the chosen strategy best meets the requirements and promotes efficient development. Key aspects to consider:  Team Size and Structure Number of Developers: Large projects with many teams and developers may require more complex strategies to manage parallel work, reduce conflicts, and increase efficiency.Team Experience: Less experienced teams may find it easier to work with simpler strategies. Release Frequency Frequent Releases: Projects with frequent releases can benefit from strategies with minimal stages from development to production.Infrequent Releases: Projects with infrequent and large releases and long development cycles are better suited to strategies with additional stages of development verification or splitting development into parallel releases. Type and Scale of Project Small Projects can use simple strategies to avoid unnecessary bureaucracy.Large and Complex Projects require thorough version control and stability, and may need more complex strategies. Need to Support Multiple Versions Projects that need to be maintained in multiple versions simultaneously may require a strategy that includes release and hotfix branches. Integration with CI/CD If the project actively uses continuous integration and deployment tools, the chosen strategy should integrate well with these processes. It's important not to overload the pipeline. Workflows and Methodologies Agile Development Methodologies (Agile, Scrum) may require a strategy that supports frequent and iterative changes.Traditional or Waterfall Methodologies may better align with more formalized strategies. Quality and Testing Requirements If the project requires thorough testing and code review before integrating changes, the strategy should meet these requirements. Code and Dependency Complexity Projects with many dependencies and complex code may need stricter branch management and version control. Need for Quick Bug Response If the project requires quick response to bugs and hotfix releases, the strategy should include mechanisms for creating and integrating hotfix branches.  A Git strategy, like a release strategy, should meet the project's requirements and architecture, ensuring flexibility and reliability.  ","version":"Next","tagName":"h2"},{"title":"Comparison of Git Strategies​","type":1,"pageTitle":"Git Strategies","url":"/SFITDelivery-KnowledgeHub/docs/Management/02_02_Git/02_02_01_Strategies#comparison-of-git-strategies","content":" Strategy\tTeam Size\tRelease Development Cycle Length\tParallel Releases\tSupporting Frequent Deployments\tLevel of Support for Parallel DevelopmentTrunk-Based Development (TBD)\tSmall/Medium\tShort\tNo\tHigh\tLow Git Flow\tSmall/Medium\tShort/Medium\tNo\tMedium\tLow/Medium Copado Branch\tSmall/Medium\tShort/Medium\tNo\tHigh/Medium\tLow/Medium Parallel Releases\tMedium/Large\tShort/Medium/Long\tYes\tMedium\tHigh Fork Strategy\tLarge\tMedium/Long\tYes\tLow\tHigh  ","version":"Next","tagName":"h2"},{"title":"Git Approaches​","type":1,"pageTitle":"Git Strategies","url":"/SFITDelivery-KnowledgeHub/docs/Management/02_02_Git/02_02_01_Strategies#git-approaches","content":" HotFix Feature Branch Org Branch  ","version":"Next","tagName":"h2"},{"title":"Git Fork Strategy","type":0,"sectionRef":"#","url":"/SFITDelivery-KnowledgeHub/docs/Management/02_02_Git/02_02_06_Fork_Strategy","content":"","keywords":"","version":"Next"},{"title":"Implementation Examples​","type":1,"pageTitle":"Git Fork Strategy","url":"/SFITDelivery-KnowledgeHub/docs/Management/02_02_Git/02_02_06_Fork_Strategy#implementation-examples","content":" The example illustrates three fork projects from the main project. Each developer of the three fork projects works as with a regular project, but merging with the main project occurs through a pull request. This includes quality control and, if necessary, discussions on possible solutions implemented in the fork project.    ","version":"Next","tagName":"h3"},{"title":"Advantages​","type":1,"pageTitle":"Git Fork Strategy","url":"/SFITDelivery-KnowledgeHub/docs/Management/02_02_Git/02_02_06_Fork_Strategy#advantages","content":" Isolation of Changes: Forks allow developers to work on their changes in separate copies of the repository, minimizing the risk of conflicts and errors in the main repository. This is especially useful when developing new features or experimental changes. Code Security: The main repository remains protected from direct changes since all modifications go through a code review process before merging. This enhances security and code quality, as all changes are checked and approved before integration. Development Flexibility: Developers can work on projects independently without affecting the main development branch. This allows teams to work at their own pace and make changes without needing to coordinate with others until the pull request is created. Quality Control: The pull request process includes mandatory code reviews, ensuring high code quality and consistency. It also allows involved developers and teams to discuss and improve changes before merging. Support for External Contributions: The fork strategy simplifies working with external contractors and freelancers, allowing them to make changes in isolated copies of the repository. This helps easily integrate their work after review.  ","version":"Next","tagName":"h3"},{"title":"Disadvantages​","type":1,"pageTitle":"Git Fork Strategy","url":"/SFITDelivery-KnowledgeHub/docs/Management/02_02_Git/02_02_06_Fork_Strategy#disadvantages","content":" Increased Overhead: Managing forks and synchronizing changes between forks and the main repository can require additional effort and resources. Regular synchronization and conflict resolution can be time-consuming processes. Management Complexity: In large projects with many forks, it can be challenging to track all changes and pull requests. This requires a well-organized process and management tools. Limited Visibility of Changes: Changes made in forks are not immediately visible to other team members, which can complicate coordination and integration of work. This is especially critical for large and distributed teams. Risk of Desynchronization: Infrequent synchronization of forks with the main repository increases the risk of conflicts and errors during merging. This can complicate the integration process and increase the time needed for conflict resolution. Need for Training and Adaptation: Effective use of the Fork Git Strategy requires team training and adaptation to new processes. This can take time and require additional resources, especially for teams unfamiliar with this strategy.  ","version":"Next","tagName":"h3"},{"title":"Main Steps of Using the Fork Strategy​","type":1,"pageTitle":"Git Fork Strategy","url":"/SFITDelivery-KnowledgeHub/docs/Management/02_02_Git/02_02_06_Fork_Strategy#main-steps-of-using-the-fork-strategy","content":" Fork the Main Repository: The developer creates a copy of the main repository in their own account. This allows them to work on the project independently of other developers and without risking damage to the main repository. Clone the Fork: The developer clones their fork to their local machine to start working on the project. Create Feature Branches: The developer creates new branches for each feature or bug fix. This allows for the isolation of changes and easier code management. Development and Commits: The developer makes changes and commits them to their feature branch. Synchronize with the Main Repository: Periodically, the developer synchronizes their fork with the main repository to get the latest changes and minimize conflicts during merging. Pull Request (PR): After completing work on a feature or bug fix, the developer sends a pull request to the main repository, proposing to integrate their changes. This allows the main repository owners to review and discuss the changes before merging.  ","version":"Next","tagName":"h3"},{"title":"Ideal Project Profile​","type":1,"pageTitle":"Git Fork Strategy","url":"/SFITDelivery-KnowledgeHub/docs/Management/02_02_Git/02_02_06_Fork_Strategy#ideal-project-profile","content":" Open-Source Project: Description: Ideal for open-source projects where any developer can fork the repository, make their changes, and submit a pull request for review.Advantages: The fork strategy simplifies attracting external contributors and managing their contributions, maintaining a high level of code quality through the code review process. Large or Distributed Development Team: Description: Projects involving large or distributed teams of developers can benefit from change isolation and independent work.Advantages: Developers can work on their features or bug fixes independently, minimizing conflicts and improving change management. Intensive Use of External Contributors: Description: Projects that actively involve external developers, such as freelancers or contractors, to perform tasks.Advantages: Forks allow external developers to make changes in isolated copies of the repository, ensuring the security of the main code and simplifying the integration of their work after review. Complex Corporate Applications: Description: Internal corporate projects with high confidentiality or criticality, where it is important to protect the main code from direct changes.Advantages: The fork strategy provides additional security, as changes go through a review process before merging with the main repository, protecting against unverified changes. Experimental Development and Research (R&amp;D): Description: Projects related to research and development of new technologies, where it is important to isolate experimental features.Advantages: Forks allow researchers to work on experiments independently of the main codebase, minimizing risk to the stability of the main product. ","version":"Next","tagName":"h3"},{"title":"Org Branch","type":0,"sectionRef":"#","url":"/SFITDelivery-KnowledgeHub/docs/Management/02_02_Git/02_02_07_Org_Branch","content":"","keywords":"","version":"Next"},{"title":"Implementation Examples​","type":1,"pageTitle":"Org Branch","url":"/SFITDelivery-KnowledgeHub/docs/Management/02_02_Git/02_02_07_Org_Branch#implementation-examples","content":" The example illustrates the strategy's implementation in a project that uses the Develop, UAT, and Staging environments.  Branches/Environments:  Develop/Integration: A branch for integrating changes developed by developers. This branch is used for merging all features and fixes before they are moved to testing.UAT: A branch for User Acceptance Testing. In this branch, users check functionality and compliance with requirements.Staging: A branch for final testing before production. Final checks and validations take place here.Production/Main: The main branch containing stable code ready for production deployment.    ","version":"Next","tagName":"h3"},{"title":"Advantages​","type":1,"pageTitle":"Org Branch","url":"/SFITDelivery-KnowledgeHub/docs/Management/02_02_Git/02_02_07_Org_Branch#advantages","content":" Transparency and Control: Clear separation of branches by environment provides better transparency and control over changes. Teams can more easily track which changes have been deployed to each environment and which are in testing. Risk Reduction: Isolating changes in the corresponding branches minimizes deployment risks. Changes go through several stages of testing (Develop, UAT, Staging, Production) before reaching production. Improved Testing: Having separate branches for different testing stages allows for more thorough code testing at each stage. UAT and Staging branches provide the opportunity for user and final testing. Flexibility in Change Management: The ability to work independently on different branches allows for more flexible change and release management. This is particularly important for urgent fixes or working on multiple features simultaneously. Simplification of CI/CD Processes: It is easier to set up and automate continuous integration and deployment processes for each environment.  ","version":"Next","tagName":"h3"},{"title":"Disadvantages​","type":1,"pageTitle":"Org Branch","url":"/SFITDelivery-KnowledgeHub/docs/Management/02_02_Git/02_02_07_Org_Branch#disadvantages","content":" Branch Management Complexity: Managing a large number of branches requires careful planning and can be labor-intensive, especially for large teams and projects. Increased Overhead: Regular synchronization and management of multiple branches increase project management overhead. This may require additional efforts to automate processes. Need for Strict Discipline: Successful application of the strategy requires the team to strictly follow established processes and branch management rules. Violating these rules can lead to chaos and code quality issues.  ","version":"Next","tagName":"h3"},{"title":"Features​","type":1,"pageTitle":"Org Branch","url":"/SFITDelivery-KnowledgeHub/docs/Management/02_02_Git/02_02_07_Org_Branch#features","content":" The main feature of the strategy is that each branch corresponds to a specific environment, simplifying change management, tracking, and CI/CD setup. This approach ensures isolation of changes at each development and testing stage, minimizing risks and improving code stability.  ","version":"Next","tagName":"h3"},{"title":"Ideal Project Profile​","type":1,"pageTitle":"Org Branch","url":"/SFITDelivery-KnowledgeHub/docs/Management/02_02_Git/02_02_07_Org_Branch#ideal-project-profile","content":" Large or Medium Development Team: The strategy is especially useful for projects where multiple teams or a large number of developers work in parallel, allowing them to isolate their changes in corresponding branches and minimize conflicts. Complex Projects with Long Development Cycles: Ideal for complex projects that require multiple rounds of testing and stabilization at various stages before production deployment. Projects with High Quality and Security Requirements: For projects where code quality and security are critical (e.g., financial applications or medical software), this strategy allows for multi-stage verification before deployment. Projects with Multiple Environments (Development, Staging, Production): For projects developed and tested in multiple environments, it is important to clearly isolate changes and manage code versions. ","version":"Next","tagName":"h3"},{"title":"Feature Branch","type":0,"sectionRef":"#","url":"/SFITDelivery-KnowledgeHub/docs/Management/02_02_Git/02_02_08_Feature_Branch","content":"","keywords":"","version":"Next"},{"title":"Implementation Examples​","type":1,"pageTitle":"Feature Branch","url":"/SFITDelivery-KnowledgeHub/docs/Management/02_02_Git/02_02_08_Feature_Branch#implementation-examples","content":" Since feature branches typically exist for a long time, periodic updates from the base branch using the merge process can be applied. This allows developers to obtain the current version of the metadata, which may have been changed while they were working on the feature. Before merging the feature branch into the main branch, it is also recommended to update the feature branch for testing and validating the current metadata. In case of conflicts, the developer can resolve them locally and test the solution. The example shows implementation scenarios:  ","version":"Next","tagName":"h2"},{"title":"Advantages​","type":1,"pageTitle":"Feature Branch","url":"/SFITDelivery-KnowledgeHub/docs/Management/02_02_Git/02_02_08_Feature_Branch#advantages","content":" Change Isolation: Each new feature is developed in a separate branch, allowing for isolation of changes and minimizing impact on the main branch. Quality Gate: Before merging the feature branch with the main branch, changes undergo code review and testing, helping to maintain code quality and reduce the likelihood of errors. Development Flexibility: Developers can work on their features independently and at their own pace, boosting productivity and efficiency. Simplified Management: The strategy makes it easy to track progress on each feature and manage changes, simplifying the development and deployment process. Easy Rollback of Changes: If a new feature causes problems, changes can be easily rolled back by reverting the merge commit. Scalability: The Feature Branch strategy scales well to projects of any size, allowing each developer or team to work on their features independently.  ","version":"Next","tagName":"h2"},{"title":"Disadvantages​","type":1,"pageTitle":"Feature Branch","url":"/SFITDelivery-KnowledgeHub/docs/Management/02_02_Git/02_02_08_Feature_Branch#disadvantages","content":" Integration Delays and Synchronization Gaps: Isolated development can lead to delays in integrating changes and losing synchronization with the main branch, especially if branches exist for a long time. This increases the risk of conflicts during merging and complicates management. Dependency Management Challenges: In complex projects with many feature branches, managing dependencies between various features can become problematic. Increased Code Review Workload: Feature branches can contain a large volume of changes, making code review significantly more complex when opening a merge request.  ","version":"Next","tagName":"h3"},{"title":"Features​","type":1,"pageTitle":"Feature Branch","url":"/SFITDelivery-KnowledgeHub/docs/Management/02_02_Git/02_02_08_Feature_Branch#features","content":" To address the shortcomings like the feature branch lagging behind the main branch, it is recommended to update it through merging. This is demonstrated in the implementation examples section. Updates should occur as needed, considering the project's specifics.  ","version":"Next","tagName":"h2"},{"title":"Ideal Project Profile​","type":1,"pageTitle":"Feature Branch","url":"/SFITDelivery-KnowledgeHub/docs/Management/02_02_Git/02_02_08_Feature_Branch#ideal-project-profile","content":" Medium or Large Development Team: The Feature Branch strategy is well-suited for projects working on multiple features simultaneously, allowing each developer or team to work independently. Modular Architecture: The project should be divided into modules or components, allowing for changes to be isolated and minimizing conflicts when merging branches. Active Use of Version Control Systems (VCS): Modern systems like Git facilitate the creation, management, and merging of feature branches. Continuous Integration (CI) and Quality Gate: Having a configured CI system that automatically runs tests and checks for each feature branch helps maintain high code quality and reduces the risk of integration issues. Strong Code Review Culture: Mandatory code reviews before merging feature branches with the main branch help maintain code quality and enhance collective responsibility for the codebase. Effective Dependency Management: The project should use tools and processes to manage dependencies between different feature branches, minimizing risks when integrating changes. Flexible Development Methodologies: Using flexible methodologies like Scrum or Kanban helps adapt the development process to current tasks and changing requirements. Management Support: Management should support the implementation of the Feature Branch strategy by providing necessary resources and creating conditions for effective team work. High Level of Test Automation: Having automated tests (unit tests, integration tests, UI tests) for each feature branch helps quickly identify and fix errors. ","version":"Next","tagName":"h2"},{"title":"HotFix","type":0,"sectionRef":"#","url":"/SFITDelivery-KnowledgeHub/docs/Management/02_02_Git/02_02_09_HotFix","content":"","keywords":"","version":"Next"},{"title":"Implementation Examples​","type":1,"pageTitle":"HotFix","url":"/SFITDelivery-KnowledgeHub/docs/Management/02_02_Git/02_02_09_HotFix#implementation-examples","content":" 1a, 1b - Strategies with backpromotion 2a, 2b - Strategies without backpromotion  It is important to note that the approach is flexible, and hotfixes can occur both in separate branches and in the most suitable branches for this purpose.  ","version":"Next","tagName":"h2"},{"title":"Features​","type":1,"pageTitle":"HotFix","url":"/SFITDelivery-KnowledgeHub/docs/Management/02_02_Git/02_02_09_HotFix#features","content":" The main factor in choosing whether to use backpromotion or not is the size of the project and the Git strategy.  Hotfix with BackpromotionOn projects with a large number of teams and a long development and delivery cycle, it is more appropriate to make changes in the branch corresponding to the production state, and then promote the changes to the developer branches. This minimizes the time required to deliver the fix to the production environment. Further promotion of the fix to the developer branches may lead to conflicts, which there will be sufficient time to resolve.  Hotfix without BackpromotionIf the development and delivery cycle on the project is short, it usually makes sense to use the regular development cycle for hotfixes. The likelihood of conflicts when transferring changes to the release branch in this case is minimal. The absence of the need for backpromotion reduces the complexity of branch management and simplifies the development process. ","version":"Next","tagName":"h2"},{"title":"Anti-patterns","type":0,"sectionRef":"#","url":"/SFITDelivery-KnowledgeHub/docs/Management/02_02_Git/02_02_10_Anti_patterns","content":"Anti-patterns Lack of Clear Structure and Documentation: Implementing Git strategies without clear documentation and structure can lead to chaos. Developers may not understand which branches to use and in what order to merge. Infrequent Branch Synchronization: In strategies with parallel releases or the Fork strategy, infrequent synchronization of branches can lead to numerous merge conflicts and increased time to resolve these conflicts. Ignoring Code Reviews and Testing: Skipping code reviews and testing stages before merging changes into main branches can result in bugs and unstable code being introduced. Lack of Automation: Without automation of processes (CI/CD), managing branches and deploying changes can become labor-intensive and error-prone. Complex Branch Management: Using too many branches without clear necessity can complicate project management and lead to confusion. Insufficient Communication and Coordination: Lack of communication between development teams can lead to duplicated efforts, conflicts, and project delays. Over-reliance on Tools: Complete dependence on specific tools without the ability to replace them can limit team flexibility and complicate adaptation to new conditions. Assuming a Universal Strategy for All Projects: Assuming that the same branching strategy will be ideal for all types of projects can lead to inefficiency and problems in implementation.","keywords":"","version":"Next"},{"title":"Fundamentals of Deployment","type":0,"sectionRef":"#","url":"/SFITDelivery-KnowledgeHub/docs/Management/02_03_Deployment/02_03_01_Fundamentals_of_Deployment","content":"Fundamentals of Deployment","keywords":"","version":"Next"},{"title":"Unlocked Packages","type":0,"sectionRef":"#","url":"/SFITDelivery-KnowledgeHub/docs/Management/02_03_Deployment/02_03_02_Unlocked_Packages","content":"Unlocked Packages","keywords":"","version":"Next"},{"title":"Release Deployment","type":0,"sectionRef":"#","url":"/SFITDelivery-KnowledgeHub/docs/Management/02_03_Deployment/02_03_03_Release_Deployment","content":"Release Deployment","keywords":"","version":"Next"},{"title":"Test Coverage Matrix","type":0,"sectionRef":"#","url":"/SFITDelivery-KnowledgeHub/docs/Management/02_03_Deployment/02_03_04_Test_Coverage_Matrix","content":"Test Coverage Matrix","keywords":"","version":"Next"},{"title":"How to Deploy Custom Labels Translation","type":0,"sectionRef":"#","url":"/SFITDelivery-KnowledgeHub/docs/Management/02_03_Deployment/02_03_100_Metadata_Features/02_03_100_01_Custom_Labels_Translation","content":"How to Deploy Custom Labels Translation Find the file force-app/main/default/translations/&lt;language_code&gt;.translation-meta.xml.Create the file if it does not exist. You can find the language code in the ISO Language Code Table: Salesforce Developer Documentation. Retrieve the file using SFDX: sfdx force:source:retrieve -p &quot;force-app/main/default/translations/&lt;language_code&gt;.translation-meta.xml&quot; -u &lt;Alias&gt; Filter the retrieved data: You will receive a lot of extra data. Choose only what you need. Completion: Once the necessary data is filtered and adjusted, the translation is ready for deployment.","keywords":"","version":"Next"},{"title":"Environment Monitoring","type":0,"sectionRef":"#","url":"/SFITDelivery-KnowledgeHub/docs/Management/02_06_Environments/02_06_01_Environment_Monitoring","content":"Environment Monitoring","keywords":"","version":"Next"},{"title":"Metadata Backup","type":0,"sectionRef":"#","url":"/SFITDelivery-KnowledgeHub/docs/Management/02_06_Environments/02_06_02_Metadata_Backup","content":"Metadata Backup","keywords":"","version":"Next"},{"title":"COPADO","type":0,"sectionRef":"#","url":"/SFITDelivery-KnowledgeHub/docs/Management/02_10_Third-party_Solutions/02_10_02_COPADO","content":"COPADO","keywords":"","version":"Next"},{"title":"Salesforce DevOps Center","type":0,"sectionRef":"#","url":"/SFITDelivery-KnowledgeHub/docs/Management/02_10_Third-party_Solutions/02_10_04_Salesforce_DevOps_Center","content":"Salesforce DevOps Center","keywords":"","version":"Next"},{"title":"Delivery Manager and DevOps on a Salesforce Project","type":0,"sectionRef":"#","url":"/SFITDelivery-KnowledgeHub/docs/Roles/","content":"","keywords":"","version":"Next"},{"title":"Salesforce​","type":1,"pageTitle":"Delivery Manager and DevOps on a Salesforce Project","url":"/SFITDelivery-KnowledgeHub/docs/Roles/#salesforce","content":" Salesforce is a SaaS (Software as a Service) solution. It provides a comprehensive suite of cloud-based applications designed to help businesses manage customer relationships, sales, and marketing more efficiently. As a SaaS platform, Salesforce offers a scalable and flexible solution that can be accessed from anywhere with an internet connection, eliminating the need for local installation and maintenance. This model allows businesses of all sizes to utilize advanced technology and infrastructure without significant upfront investment. Salesforce's services are continuously updated, ensuring that users have access to the latest features and security enhancements.    ","version":"Next","tagName":"h2"},{"title":"Delivery Manager and DevOps Specialist​","type":1,"pageTitle":"Delivery Manager and DevOps on a Salesforce Project","url":"/SFITDelivery-KnowledgeHub/docs/Roles/#delivery-manager-and-devops-specialist","content":" Salesforce is a SaaS solution, which is why the division into release managers, DevOps specialists, or Delivery Managers on projects, especially small ones, may be absent. Also, combining roles in one position can make sense provided that an effective and resilient CI/CD infrastructure is built. Merging these roles into a single employee or department will allow for more efficient resource, delivery, and project management.  Both roles on Salesforce projects are responsible for end-to-end processes and are accountable for their:  EfficiencyReliabilityPredictabilityScalabilityFlexibility  These roles understand which solution is better suited for a specific project considering its size, goals, products, maturity level, and other characteristics. Delivery Managers and DevOps are responsible for restructuring processes to maintain business flexibility as it grows or changes.  ","version":"Next","tagName":"h2"},{"title":"Service Delivery Manager vs Delivery Manager​","type":1,"pageTitle":"Delivery Manager and DevOps on a Salesforce Project","url":"/SFITDelivery-KnowledgeHub/docs/Roles/#service-delivery-manager-vs-delivery-manager","content":" The Service Delivery Manager differs from the Delivery Manager in that the Delivery Manager on the project is responsible for the successful completion and delivery of the project, managing the team and resources. The Service Delivery Manager focuses on managing the quality and timely delivery of IT services, interacting with clients, and maintaining SLAs (Service Level Agreements). Delivery Manager - focuses on the project. Service Delivery Manager - focuses on long-term service and customer relationships.  ","version":"Next","tagName":"h2"},{"title":"About This Section of the Hub​","type":1,"pageTitle":"Delivery Manager and DevOps on a Salesforce Project","url":"/SFITDelivery-KnowledgeHub/docs/Roles/#about-this-section-of-the-hub","content":" The description of roles is divided into separate sections:  Role: DevOps SpecialistRole: Delivery Manager  The Management section is combined to simplify navigation and so that each company and project can independently define the necessary areas of influence for specialists. ","version":"Next","tagName":"h2"},{"title":"Data Backup","type":0,"sectionRef":"#","url":"/SFITDelivery-KnowledgeHub/docs/Management/02_06_Environments/02_06_03_Data_Backup","content":"Data Backup","keywords":"","version":"Next"},{"title":"DevOps Maturity Matrix","type":0,"sectionRef":"#","url":"/SFITDelivery-KnowledgeHub/docs/Management/02_07_Project/02_07_01_DevOps_Maturity_Matrix","content":"","keywords":"","version":"Next"},{"title":"What Is It?​","type":1,"pageTitle":"DevOps Maturity Matrix","url":"/SFITDelivery-KnowledgeHub/docs/Management/02_07_Project/02_07_01_DevOps_Maturity_Matrix#what-is-it","content":" The DevOps Maturity Matrix is a framework that helps organizations assess their current state in the DevOps domain and develop a growth plan. This matrix typically includes several levels of maturity, ranging from initial stages (e.g., traditional development processes) to optimized stages(where DevOps is fully integrated into the company's culture and processes).  ","version":"Next","tagName":"h2"},{"title":"Why Is It Needed?​","type":1,"pageTitle":"DevOps Maturity Matrix","url":"/SFITDelivery-KnowledgeHub/docs/Management/02_07_Project/02_07_01_DevOps_Maturity_Matrix#why-is-it-needed","content":" The DevOps Maturity Matrix is essential for:  Determining the current level: Assessing the organization's position in its DevOps transformation journey.Planning for Improvements: Creating a roadmap for improving processes, tools, and practices.Identifying Gaps: Identifying areas that require improvement or development.Improving Product Quality: Guaranteeing higher-quality and more rapid software releases.Motivating the Team: Offering a clear developmental path that encourages team progression.  ","version":"Next","tagName":"h2"},{"title":"How to Create It?​","type":1,"pageTitle":"DevOps Maturity Matrix","url":"/SFITDelivery-KnowledgeHub/docs/Management/02_07_Project/02_07_01_DevOps_Maturity_Matrix#how-to-create-it","content":" Developing a DevOps Maturity Matrix involves:  Defining Target Parameters: Selection of key DevOps aspects, such as automation, culture, measurement, and collaboration.Setting Maturity Levels: Defining various maturity levels for each parameter, typically from 1 to 5.Developing Assessment Criteria: Establishing criteria for each level of maturity. Criteria should contain an explicit and complete description of acceptance criteria and what must be done. The benefit for the organization/project should be described.Including Examples and Recommendations: Adding practical examples and recommendations for achieving each level.Determining Dependencies: Indicating dependencies between different categories and levels.  The creation of the matrix requires the participation of representatives from all teams involved in the delivery processes, such as Developers, Scrum Masters, Product Owners, QA, and others. Forming a transformation team is advisable.  ","version":"Next","tagName":"h2"},{"title":"How Is It Maintained?​","type":1,"pageTitle":"DevOps Maturity Matrix","url":"/SFITDelivery-KnowledgeHub/docs/Management/02_07_Project/02_07_01_DevOps_Maturity_Matrix#how-is-it-maintained","content":" Maintaining the DevOps Maturity Matrix includes:  Regular Assessment: Conducting periodic evaluations to ascertain the organization's current maturity level.Planning Improvements: Outlining and organizing initiatives to advance to higher levels, specifying time frames like quarters or months.Tracking Progress: Monitoring changes and improvements in DevOps processes and compiling a report for the specified time frames with an explanation of the final results, conclusions, and recommendations.Updating the Matrix: Regularly updating the matrix to reflect changes in the industry and within the organization or project.  The DevOps Maturity Matrix is a dynamic document that needs to constantly evolve to align with the organization's shifting objectives and conditions. It is a valuable tool for understanding and directing the evolution of DevOps practices in the company. ","version":"Next","tagName":"h2"},{"title":"Comparison of Tools","type":0,"sectionRef":"#","url":"/SFITDelivery-KnowledgeHub/docs/Management/02_10_Third-party_Solutions/02_10_01_Comparison_of_Tools","content":"Comparison of Tools","keywords":"","version":"Next"},{"title":"The Role of a DevOps Specialist","type":0,"sectionRef":"#","url":"/SFITDelivery-KnowledgeHub/docs/Roles/01_01_DevOps/index0101","content":"","keywords":"","version":"Next"},{"title":"Why a DevOps Specialist is Needed​","type":1,"pageTitle":"The Role of a DevOps Specialist","url":"/SFITDelivery-KnowledgeHub/docs/Roles/01_01_DevOps/index0101#why-a-devops-specialist-is-needed","content":" Enhancing collaboration and communication between software development and IT operations.Automating and streamlining software development and deployment processes.Implementing continuous integration and continuous delivery (CI/CD) pipelines to improve delivery quality, efficiency and responsiveness.Creation/optimization and accountability for end-to-end processes  ","version":"Next","tagName":"h2"},{"title":"What a DevOps Specialist Does​","type":1,"pageTitle":"The Role of a DevOps Specialist","url":"/SFITDelivery-KnowledgeHub/docs/Roles/01_01_DevOps/index0101#what-a-devops-specialist-does","content":" The tasks of a DevOps Specialist are centered around building and maintaining the infrastructure and tools needed for rapid software development and deployment.  Automating Infrastructure  Continuous Integration and Continuous DeploymentMonitoring and Managing environments.  ","version":"Next","tagName":"h2"},{"title":"How a DevOps Specialist Works​","type":1,"pageTitle":"The Role of a DevOps Specialist","url":"/SFITDelivery-KnowledgeHub/docs/Roles/01_01_DevOps/index0101#how-a-devops-specialist-works","content":" To achieve their goals, a DevOps Specialist adopts a variety of roles and responsibilities, including system administrator, developer, security expert, manager, and coach.  ","version":"Next","tagName":"h2"},{"title":"The System Administrator​","type":1,"pageTitle":"The Role of a DevOps Specialist","url":"/SFITDelivery-KnowledgeHub/docs/Roles/01_01_DevOps/index0101#the-system-administrator","content":" As a System Administrator, they manage and optimize infrastructure, ensure system reliability and scalability, and work closely with IT to align with organizational goals.  ","version":"Next","tagName":"h3"},{"title":"The Developer​","type":1,"pageTitle":"The Role of a DevOps Specialist","url":"/SFITDelivery-KnowledgeHub/docs/Roles/01_01_DevOps/index0101#the-developer","content":" As a Developer, they write scripts to automate various processes, contribute to software development, and implement automation tools.  ","version":"Next","tagName":"h3"},{"title":"The Security Expert​","type":1,"pageTitle":"The Role of a DevOps Specialist","url":"/SFITDelivery-KnowledgeHub/docs/Roles/01_01_DevOps/index0101#the-security-expert","content":" As a Security Expert, they integrate security practices into the development process, ensuring that security is a priority from the start of software development to deployment.  ","version":"Next","tagName":"h3"},{"title":"The Manager​","type":1,"pageTitle":"The Role of a DevOps Specialist","url":"/SFITDelivery-KnowledgeHub/docs/Roles/01_01_DevOps/index0101#the-manager","content":" A DevOps specialist manages delivery processes, receiving feedback in the form of metrics and feedback from teams. The specialist modifies processes according to the conditions and tasks within the company. They are accountable to stakeholders.  ","version":"Next","tagName":"h3"},{"title":"The Coach​","type":1,"pageTitle":"The Role of a DevOps Specialist","url":"/SFITDelivery-KnowledgeHub/docs/Roles/01_01_DevOps/index0101#the-coach","content":" This role involves training employees and supporting them. A DevOps specialist creates documentation describing processes and instructions for developers and other interested parties. ","version":"Next","tagName":"h3"},{"title":"Gearset","type":0,"sectionRef":"#","url":"/SFITDelivery-KnowledgeHub/docs/Management/02_10_Third-party_Solutions/02_10_03_Gearset","content":"Gearset","keywords":"","version":"Next"},{"title":"The Role of a Delivery Manager","type":0,"sectionRef":"#","url":"/SFITDelivery-KnowledgeHub/docs/Roles/01_02_Delivery_Manager/index0102","content":"","keywords":"","version":"Next"},{"title":"Why a Delivery Manager is Needed​","type":1,"pageTitle":"The Role of a Delivery Manager","url":"/SFITDelivery-KnowledgeHub/docs/Roles/01_02_Delivery_Manager/index0102#why-a-delivery-manager-is-needed","content":" Ensuring agile approaches to project management and product delivery.Responsibility for delivering the project from start to finish, including planning, monitoring, and reporting.Facilitating communication between stakeholders, development teams, and customers, ensuring everyone is aligned and informed.Ensuring flexibility and scalability of value delivery processes in response to business changes.Prioritising tasks and features based on their value to the customer, maximizing the impact of each project iteration.  ","version":"Next","tagName":"h2"},{"title":"What a Delivery Manager Does​","type":1,"pageTitle":"The Role of a Delivery Manager","url":"/SFITDelivery-KnowledgeHub/docs/Roles/01_02_Delivery_Manager/index0102#what-a-delivery-manager-does","content":" The core responsibility of a Delivery Manager is to oversee the entire delivery lifecycle, fostering a collaborative environment that leads to successful project outcomes. Here are some key areas they focus on:  Project Management with Agile MethodologyCoordination of Development Teams and Resource ManagementMonitoring Project Progress and QualityRisk ManagementTeam Coaching and Facilitation  ","version":"Next","tagName":"h2"},{"title":"How a Delivery Manager Works​","type":1,"pageTitle":"The Role of a Delivery Manager","url":"/SFITDelivery-KnowledgeHub/docs/Roles/01_02_Delivery_Manager/index0102#how-a-delivery-manager-works","content":" To achieve their goals, a Delivery Manager takes on several roles and responsibilities, including project manager, change agent, team coordinator, and mentor.  ","version":"Next","tagName":"h2"},{"title":"The Project Manager​","type":1,"pageTitle":"The Role of a Delivery Manager","url":"/SFITDelivery-KnowledgeHub/docs/Roles/01_02_Delivery_Manager/index0102#the-project-manager","content":" As a project manager, they are responsible for planning, executing, and monitoring projects, utilising agile methodologies for flexible and efficient operation.  ","version":"Next","tagName":"h3"},{"title":"The Change Agent​","type":1,"pageTitle":"The Role of a Delivery Manager","url":"/SFITDelivery-KnowledgeHub/docs/Roles/01_02_Delivery_Manager/index0102#the-change-agent","content":" As a change agent, they facilitate the adoption of agile practices within teams and the organisation, adapting processes to changing conditions and requirements.  ","version":"Next","tagName":"h3"},{"title":"The Team Coordinator​","type":1,"pageTitle":"The Role of a Delivery Manager","url":"/SFITDelivery-KnowledgeHub/docs/Roles/01_02_Delivery_Manager/index0102#the-team-coordinator","content":" They ensure team alignment and manage communications and resources to ensure projects are completed on time and meet customer expectations.  ","version":"Next","tagName":"h3"},{"title":"The Mentor​","type":1,"pageTitle":"The Role of a Delivery Manager","url":"/SFITDelivery-KnowledgeHub/docs/Roles/01_02_Delivery_Manager/index0102#the-mentor","content":" The Delivery Manager helps in developing team skills, conducting training and mentoring to increase efficiency and adaptability to agile methodologies. ","version":"Next","tagName":"h3"},{"title":"Knowledge and Skills","type":0,"sectionRef":"#","url":"/SFITDelivery-KnowledgeHub/docs/Roles/01_01_DevOps/01_01_01_Knowledge_and_Skills_DevOps","content":"","keywords":"","version":"Next"},{"title":"Skills Experience Knowledge​","type":1,"pageTitle":"Knowledge and Skills","url":"/SFITDelivery-KnowledgeHub/docs/Roles/01_01_DevOps/01_01_01_Knowledge_and_Skills_DevOps#skills-experience-knowledge","content":" ","version":"Next","tagName":"h2"},{"title":"Must to Have Skills:​","type":1,"pageTitle":"Knowledge and Skills","url":"/SFITDelivery-KnowledgeHub/docs/Roles/01_01_DevOps/01_01_01_Knowledge_and_Skills_DevOps#must-to-have-skills","content":" Experience in troubleshooting, diagnosis, and problem solving.Experience with change management systems and processes. Experience with release management tools (GitLab/Jira/Copado/...).Experience with CI/CD tools (Gearset/Copado/Jenkins/GitLab CI/...).Expertise in working with DevOps issues and coordinating the phases of the SDLC.Experience in development (Python/Go/Bash/Apex)Experience in VCS (GIT)Experience in SFDX CLIThe ability to work with mdapi and dx projects, knowing their differences and features.The ability to work with unlocked packages.Understanding of lean manufacturing/TPS principlesKnowledge of agile approaches (scrum/kanban/SAFe) and their features with possible technical implementation (bringing to life)  ","version":"Next","tagName":"h3"},{"title":"Nice to Have Skills:​","type":1,"pageTitle":"Knowledge and Skills","url":"/SFITDelivery-KnowledgeHub/docs/Roles/01_01_DevOps/01_01_01_Knowledge_and_Skills_DevOps#nice-to-have-skills","content":" Experience with AWS, API, Azure, CI/CD pipelines, Visualforce, ANT.Experience in working in large environments with multiple work streams and vendors.Ability to write Apex and JavaScript code.Ability to prepare reports on Continuous Integration and release execution.Experience with AppExchange packages installation and configuration.Familiarity with the Heroku platform.  ","version":"Next","tagName":"h3"},{"title":"Special knowledge includes such soft skills as:​","type":1,"pageTitle":"Knowledge and Skills","url":"/SFITDelivery-KnowledgeHub/docs/Roles/01_01_DevOps/01_01_01_Knowledge_and_Skills_DevOps#special-knowledge-includes-such-soft-skills-as","content":" Responsibility and reliabilityComposure in critical and conflict situationsAbility to work with people, educate, and support them when necessary  ","version":"Next","tagName":"h3"},{"title":"Trailhead SF​","type":1,"pageTitle":"Knowledge and Skills","url":"/SFITDelivery-KnowledgeHub/docs/Roles/01_01_DevOps/01_01_01_Knowledge_and_Skills_DevOps#trailheadsf","content":" Admin Beginner - linkUser Management - linkQuick Start: Salesforce DX - linkQuick Start: Visual Studio Code for Salesforce Development - linkData Security - linkBuild Apex Coding Skills - linkSecond-Generation Managed Packages - linkQuick Start: Unlocked Packages - link  ","version":"Next","tagName":"h2"},{"title":"Trailmix:​","type":1,"pageTitle":"Knowledge and Skills","url":"/SFITDelivery-KnowledgeHub/docs/Roles/01_01_DevOps/01_01_01_Knowledge_and_Skills_DevOps#trailmix","content":" Architect Journey: Development Lifecycle and Deployment - link  ","version":"Next","tagName":"h3"},{"title":"Certifications​","type":1,"pageTitle":"Knowledge and Skills","url":"/SFITDelivery-KnowledgeHub/docs/Roles/01_01_DevOps/01_01_01_Knowledge_and_Skills_DevOps#certifications","content":" ","version":"Next","tagName":"h2"},{"title":"Confirming an understanding of the specifics of working with Salesforce:​","type":1,"pageTitle":"Knowledge and Skills","url":"/SFITDelivery-KnowledgeHub/docs/Roles/01_01_DevOps/01_01_01_Knowledge_and_Skills_DevOps#confirming-an-understanding-of-the-specifics-of-working-with-salesforce","content":" Platform Developer I - linkDevelopment Lifecycle and Deployment Architect - linkAdministrator - linkDevOps Launchpad (Salesforce DevOps Fundamentals Certificate, Salesforce DevOps Leadership Certificate, Salesforce Backup Certificate)- link  ","version":"Next","tagName":"h3"},{"title":"Understanding of processes:​","type":1,"pageTitle":"Knowledge and Skills","url":"/SFITDelivery-KnowledgeHub/docs/Roles/01_01_DevOps/01_01_01_Knowledge_and_Skills_DevOps#understanding-of-processes","content":" Agile Project and Delivery Management (ICAgile) - linkLeading SAFe - linkITIL 4 Foundation - link  ","version":"Next","tagName":"h3"},{"title":"Grades​","type":1,"pageTitle":"Knowledge and Skills","url":"/SFITDelivery-KnowledgeHub/docs/Roles/01_01_DevOps/01_01_01_Knowledge_and_Skills_DevOps#grades","content":" Grade\tResponsibility and EmploymentJunior\tHelps to resolve issues with the deployment of developer metadata. Supports environments and CI/CD processes. Can be involved in performing manual steps or building automation. There is support from a mentor or manager. Junior+\tCan independently resolve 80% of deployment issues (research and problem-solving skills). Good interaction with teams. There is support from a mentor or manager. Middle\tPrepares and conducts uncomplicated releases to production. Able to independently support CI/CD. Solves all emerging deployment problems for developers. Suggests improvements to delivery and monitoring processes. Good communication with stakeholders. There is support from a mentor or manager. Middle+\tConducts any deployments to production. Solves internal and cross-team problems. Builds complete delivery processes and partially end-to-end and discovery processes. There is support from a mentor or manager. Senior\tAble to adapt and propose the optimal solution for the delivery process depending on the conditions set and available resources. Can implement the necessary automation and adjust processes. Improves the end-to-end delivery of large or complex products. Lead\tOperates with metrics, understands the needs of the business and the specifics of projects, and can find optimal and balanced solutions. Works with groups of teams from their own direction and others. ","version":"Next","tagName":"h2"},{"title":"Knowledge and Skills","type":0,"sectionRef":"#","url":"/SFITDelivery-KnowledgeHub/docs/Roles/01_02_Delivery_Manager/01_02_01_Knowledge_and_Skills_Delivery_Manager","content":"","keywords":"","version":"Next"},{"title":"Skills Experience Knowledge​","type":1,"pageTitle":"Knowledge and Skills","url":"/SFITDelivery-KnowledgeHub/docs/Roles/01_02_Delivery_Manager/01_02_01_Knowledge_and_Skills_Delivery_Manager#skills-experience-knowledge","content":" ","version":"Next","tagName":"h2"},{"title":"Must-Have Skills:​","type":1,"pageTitle":"Knowledge and Skills","url":"/SFITDelivery-KnowledgeHub/docs/Roles/01_02_Delivery_Manager/01_02_01_Knowledge_and_Skills_Delivery_Manager#must-have-skills","content":" Proven experience in planning, executing, and monitoring Salesforce projects on time and within budget.Deep knowledge of Agile practices and Waterfall approach to project management.Deep understanding of the Salesforce platform, including its functionalities, configurations, and best practices.Understanding the different approaches to development and delivery and their pros and cons (DX, MDAPI, packages).Working knowledge of DevOps principles and tools (CI/CD pipelines, Git, SFDX) used in Salesforce deployments.Ability to manage and communicate effectively with stakeholders across various levels of the organization.Ability to identify, analyze, and resolve project issues proactively. Develop contingency plans to mitigate risks and ensure smooth project delivery.Experience and deep knowledge in metrics and best practices for their application, depending on the project's goals.  ","version":"Next","tagName":"h3"},{"title":"Nice-to-Have Skills:​","type":1,"pageTitle":"Knowledge and Skills","url":"/SFITDelivery-KnowledgeHub/docs/Roles/01_02_Delivery_Manager/01_02_01_Knowledge_and_Skills_Delivery_Manager#nice-to-have-skills","content":" Familiarity with project management and collaboration tools (e.g., Netsuite OpenAir) and CI/CD tools relevant to Salesforce deployments.Background in consulting, especially in Salesforce.com or other CRM/SaaS solutions, providing a broad perspective on different implementation strategies.Understanding of change management methodologies for implementing new Salesforce functionalities within organizations.Familiarity with integrating Salesforce with external APIs for data exchange.  ","version":"Next","tagName":"h3"},{"title":"Special Knowledge:​","type":1,"pageTitle":"Knowledge and Skills","url":"/SFITDelivery-KnowledgeHub/docs/Roles/01_02_Delivery_Manager/01_02_01_Knowledge_and_Skills_Delivery_Manager#special-knowledge","content":" Capability to mentor, coach, and develop junior team members, fostering a culture of continuous improvement and learning.Ability to prioritize tasks, manage multiple projects simultaneously, and meet deadlines effectively.Strong analytical skills to assess project data and make informed decisions.Ability to adapt to changing project requirements and work effectively in a fast-paced environment.  ","version":"Next","tagName":"h3"},{"title":"Trailhead SF​","type":1,"pageTitle":"Knowledge and Skills","url":"/SFITDelivery-KnowledgeHub/docs/Roles/01_02_Delivery_Manager/01_02_01_Knowledge_and_Skills_Delivery_Manager#trailheadsf","content":" Admin Beginner - linkUser Management - linkQuick Start: Salesforce DX - linkData Security - linkSecond-Generation Managed Packages - linkQuick Start: Unlocked Packages - link  Trailmix:​  Architect Journey: Development Lifecycle and Deployment - link  ","version":"Next","tagName":"h2"},{"title":"Certifications​","type":1,"pageTitle":"Knowledge and Skills","url":"/SFITDelivery-KnowledgeHub/docs/Roles/01_02_Delivery_Manager/01_02_01_Knowledge_and_Skills_Delivery_Manager#certifications","content":" ","version":"Next","tagName":"h2"},{"title":"Confirming an understanding of the specifics of working with Salesforce:​","type":1,"pageTitle":"Knowledge and Skills","url":"/SFITDelivery-KnowledgeHub/docs/Roles/01_02_Delivery_Manager/01_02_01_Knowledge_and_Skills_Delivery_Manager#confirming-an-understanding-of-the-specifics-of-working-with-salesforce","content":" Development Lifecycle and Deployment Architect - link  ","version":"Next","tagName":"h3"},{"title":"Understanding of processes:​","type":1,"pageTitle":"Knowledge and Skills","url":"/SFITDelivery-KnowledgeHub/docs/Roles/01_02_Delivery_Manager/01_02_01_Knowledge_and_Skills_Delivery_Manager#understanding-of-processes","content":" Agile Project and Delivery Management (ICAgile) - linkLeading SAFe - linkITIL 4 Foundation - linkProject Management Professional (PMP) - linkAgile Delivery at Scale (ICAgile) - link  ","version":"Next","tagName":"h3"},{"title":"Grades​","type":1,"pageTitle":"Knowledge and Skills","url":"/SFITDelivery-KnowledgeHub/docs/Roles/01_02_Delivery_Manager/01_02_01_Knowledge_and_Skills_Delivery_Manager#grades","content":" Grade\tResponsibility and EmploymentJunior\tAssists in managing smaller projects or components of larger projects under supervision. Focuses on learning the basics of agile project management, tools, and techniques. Participates in meetings and supports the communication flow between teams. Receives guidance from a mentor or manager. Junior+\tManages small to medium projects with minimal supervision. Begins to handle client communications and coordinates effectively with team members. Tracks project progress, analyzes basic metrics, and identifies areas for improvement. Can identify and solve basic project issues. Still receives support from a mentor or manager but shows initiative and problem-solving skills. Middle\tManages projects of moderate complexity, ensuring on-time and on-budget delivery. Demonstrates strong communication with clients and stakeholders. Able to solve most of the project-related problems independently. Contributes to process improvement and effectively manages project risks. Manages dependencies across teams. Middle+\tLeads the delivery of complex projects with multiple teams and dependencies. Leads project planning, scheduling, monitoring, and reporting activities. Works across teams to solve complex issues and improve project delivery processes. Begins to contribute strategically, offering insights for improvement across projects. Optimizes delivery processes to improve efficiency and quality. Builds end-to-end, delivery and discovery processes. Senior\tFully responsible for the delivery of large and complex projects. Develops and implements Delivery strategies aligned with overall business goals. Excels in stakeholder management, strategic planning, and risk management. Manages a portfolio of projects, ensuring optimal resource allocation and prioritization. Identifies opportunities for organizational-level improvements in the delivery process. Innovates and leads in the adoption of new methodologies or tools to improve delivery efficiency and quality. Acts as a mentor to less experienced Delivery Managers and contributes to the strategic planning of the department. Lead\tOversees multiple projects or a portfolio, setting strategic direction and ensuring alignment with organizational goals. Leads and develops a team of Delivery Managers, fostering a culture of continuous improvement and excellence. ","version":"Next","tagName":"h2"},{"title":"DevOps: Books Videos Materials","type":0,"sectionRef":"#","url":"/SFITDelivery-KnowledgeHub/docs/Useful materials/99_01_useful_materials","content":"DevOps: Books Videos Materials Books Mastering Salesforce DevOps - link The DevOps Handbook - link Pro Git (free) - link Video Introduction: The State of Salesforce DevOps - link Discover Salesforce, DevOps and Copado CI/CD automations - link Azure DevOps with Salesforce - link Trailhead SF You need to study the following Trails: Admin Beginner - link User Management - link Quick Start: Salesforce DX - link Quick Start: Visual Studio Code for Salesforce Development - link Package Development Model - link Unlocked Packages for Customers - link Data Security - link Build Apex Coding Skills - link Articles (here you will find many answers on salesforce) Salesforce Developers Blog - link","keywords":"","version":"Next"},{"title":"Applications","type":0,"sectionRef":"#","url":"/SFITDelivery-KnowledgeHub/docs/Useful materials/99_02_recommended_applications","content":"Applications Meld (Meld is a visual diff and merge tool targeted at developers) - link Workbench (multifunctional solutions for working with environments) - link Perm-comparator (Compare Salesforce.com Users, Profiles, and Permission Sets) - link Multi-highlight (for chrome) - link Grammarly (for chrome) - link Salesforce inspector (for chrome) - link","keywords":"","version":"Next"},{"title":"Responsibility","type":0,"sectionRef":"#","url":"/SFITDelivery-KnowledgeHub/docs/Roles/01_01_DevOps/01_01_02_Responsibility_DevOps","content":"Responsibility info The higher level inherits the responsibilities of the previous levels. Responsibility levels are not fixed. Duties can change depending on the project and company. It's important to consider the individual skills and experience of specialists. Grade\tJunior\tJunior+\tMiddle\tMiddle+\tSenior\tLeadAutomation and optimisation of delivery\tEnsuring the operability of individual jobs. Building simple automations as assigned. Creating tests to check automations.\tSupporting the operability of the entire pipeline.\tImproving and adapting any automations and processes as assigned. Proposing own improvements based on the analysis of existing processes.\tDefining and fixing errors and shortcomings of delivery processes, based on coordination of changes (with Senior or Lead and/or stakeholders).\tPrioritizing tasks related to delivery.\tTask distribution and control over their execution. Responsibility for all processes related to delivery. Improving the reliability of processes (technical aspect)\tMonitoring the state and performance of individual systems and services. Participating in routine log analysis and alerts to assist in identifying problems. Performing routine testing tasks. Documenting test scenarios and results. Tracking and recording incidents.\tAutomation of routine testing and monitoring tasks. Configuring tools for tracking performance. Analyzing test data and logs. Identifying and eliminating simple technical problems.\tAnalyzing complex systemic problems and developing recommendations for improving reliability. Developing and implementing comprehensive automated solutions for proactive detection and elimination of potential bottlenecks and errors.\tDeveloping strategies for improving the overall architecture of the system in terms of reliability and scalability. Leading junior specialists in performing tasks related to reliability. Initiating and conducting technical reviews and system audits. Analyzing and optimizing system performance. Implementing tools for monitoring and incident management. Developing and implementing SRE practices.\tMaking key technical decisions aimed at increasing the resilience and reliability of critical systems. Developing policies and procedures that ensure a high level of availability and security. Participating in the planning of capital improvements to the infrastructure.\tLeading strategic planning and managing projects to improve reliability and efficiency of technical processes. Ensuring compliance with reliability standards at all stages of development and operation of systems. Enhancing project reliability (matrix/coverage/validation)\tParticipation in the preparation of test data and basic testing scenarios. Monitoring and documenting test results. Assisting in maintaining up-to-date project documentation, ensuring the accuracy of the test coverage matrix.\tDefining testing and validation problems. Finding causes and solving through appeals to leads or mentors.\tInitiating quality improvement processes based on the analysis of test results.\tCoordinating testing and validation processes between teams, managing resources and testing tools. Conducting project validation. Analyzing and optimizing test coverage. Implementing test data management tools. Developing and implementing a validation strategy.\tMaking strategic decisions regarding project testing and validation methodologies. Assessing and implementing new technologies and approaches to improve product reliability and quality. Developing quality policies and standards, managing quality risks on the project.\tResponsibility for overall project reliability. Defining and implementing a quality assurance strategy. Risk management and incident response. Interacting with all stakeholders, including interaction with other development projects. Building a backup system (metadata/data)\tPerforming routine tasks for backup data and metadata under the guidance of more experienced colleagues. Restoring metadata and data from backups.\tActively participating in the implementation and optimization of backup procedures. Responsible for regular backup execution according to the established schedule. Conducting simple data recovery operations to verify the integrity of backups. Monitoring the backup system.\tDeveloping backup scenarios. Defining backup policy. Optimizing the backup system. Analyzing and resolving problems with backups.\tManaging the infrastructure for backups, including selecting and configuring tools and services for data and metadata backup. Ensuring the security of backups. Restoring the system from a backup. Analyzing and improving the efficiency of data recovery.\tDeveloping and implementing a backup strategy. Assessing and implementing new backup technologies. Leading a team of backup specialists.\tResponsibility for the overall backup system. Ensuring the backup system complies with requirements. Risk management and incident response. Monitoring environments\tSetting up basic dashboards and alerts based on provided settings and templates. Supporting the verification and maintenance of monitoring system operability. Participating in routine monitoring of system resources, application performance, and core services. Recording and escalating incidents.\tAnalyzing monitoring data to identify trends and potential problems. Proposing solutions to improve performance.\tSetting up and optimizing monitoring systems. Leading initiatives to improve performance based on monitoring data and environment.\tImplementing a monitoring system. Ensuring the security of the monitoring system. Analyzing complex problems and developing solutions to eliminate system bottlenecks.\tDeveloping and implementing a monitoring strategy. Assessing and implementing new monitoring technologies. Making key decisions on monitoring architecture and alerting. Ensuring the integration of monitoring systems with other DevOps tools for continuous delivery and configuration management.\tResponsibility for the overall monitoring system. Leading strategic planning and development of monitoring and alerting systems at the organizational level. Ensuring the monitoring system complies with requirements. Risk management and incident response. Developing a git strategy\tStudying and applying basic Git commands in accordance with the current team strategy. Participating in updating project documentation, including manuals on using Git. Supporting the resolution of basic merge conflicts under the guidance of more experienced colleagues.\tSetting up local and remote repositories according to established rules. Participating in the development and implementation of templates for commit messages and code review processes. Assisting in training new team members on the Git strategy, name conventions, and project rules.\tOptimizing Git workflow. Automating Git processes. Leading junior specialists in resolving complex merging issues and using Git.\tImplementing GitOps practices. Ensuring the security of the Git repository. Planning and implementing a branching strategy and merge policies for projects. Organizing and conducting training sessions on advanced Git techniques for the team.\tMaking key decisions regarding version control tools and processes in the project. Developing a comprehensive Git strategy, including integration with CI/CD systems and other DevOps tools. Implementing new Git tools. Assessing the impact of the Git strategy and applied systems on project performance and security.\tResponsibility for the overall Git strategy. Developing security policies and code compliance requirements in the context of Git. Coordinating with development, testing, and operation teams to ensure effective integration and use of Git within DevOps practices. Risk management and incident response. Developing a release strategy\tParticipation in the preparation and execution of tasks related to releases under the guidance of more experienced colleagues. Assisting in updating release documentation and the knowledge base. Learning the basics of version management and release processes.\tAutomating routine tasks for release preparation. Tracking and reporting on the progress of tasks related to current releases.\tActively participating in release planning. Optimizing release strategy. Independently conducting releases. Developing and optimizing CI/CD processes according to project requirements. Assessing risks and managing issues related to releases.\tDeveloping and implementing a release management strategy tailored to the tasks and requirements of the project. Assessing changes using metrics. Coordinating between development, testing, and operation teams to ensure consistency and quality of releases.\tMaking key decisions on release strategy, including the selection of tools and methodologies, supporting change management decisions. Developing security policies and compliance requirements in the release process. Leading and training the team in best practices and release procedures.\tManaging and ensuring communication between stakeholders. Developing and implementing innovative approaches to delivery and release management for continuous process improvement. Developing and maintaining a culture of continuous improvement in the team and organization. Interaction with teams and responding to feedback\tParticipating in team meetings. Performing tasks assigned by the team. Collecting and transmitting feedback. Participating in the process of gathering requirements and suggestions for process improvement.\tActively collaborating with developers, testers, and business analysts to clarify tasks and determine priorities. Constructively responding to feedback. Participating in product quality improvement processes based on user feedback analysis. Proposing ideas and solutions.\tCoordinating interaction between different teams for efficient resolution of arising tasks and questions. Developing and implementing mechanisms for collecting and analyzing feedback from users and the team. Proposing and implementing process improvements based on received feedback.\tDeveloping and implementing a strategy for interaction with teams. Managing conflicts and ensuring effective communication between teams.\tMaking strategic decisions based on the analysis of feedback from teams and users. Defining long-term goals for team interaction and product improvement. Developing and implementing a culture of continuous improvement and openness to feedback at all organizational levels.\tDeveloping policies and procedures for managing changes based on feedback. Leading and mentoring teams in constructive interaction and adapting to changes. Knowledge base and employee training\tParticipation in the creation and updating of project documentation, including user manuals, frequently asked questions, and basic instructions. Collecting feedback from users and colleagues to improve existing materials. Assisting in organizing internal training.\tDeveloping and supporting specialized sections in the knowledge base, focused on specific aspects of working with Salesforce and DevOps practices. Conducting introductory sessions for new employees on using tools and processes. Participating in creating educational materials and cases.\tOrganizing and conducting specialized trainings and workshops for the team, dedicated to new technologies, methodologies, and best practices in DevOps and working with Salesforce. Curating and updating sections of the knowledge base related to complex technical issues and best practices.\tDeveloping and implementing a strategy for training and skill development within the team, including planning educational events and evaluating their effectiveness.\tDetermining overall goals and strategies for continuous learning and team development in line with current and future project needs. Developing policies and procedures for knowledge management in the organization. Assessing the contribution of training programs to achieving business goals.\tStrategic planning and leading initiatives to create a corporate culture of continuous learning and self-development. Implementing innovative approaches to training and development, including the use of AI and machine learning for personalized learning. Managing budgets and resources for educational programs. Developing partnerships with educational institutions and organisations for knowledge and experience exchange.","keywords":"","version":"Next"},{"title":"Antipatterns","type":0,"sectionRef":"#","url":"/SFITDelivery-KnowledgeHub/docs/Useful materials/99_03_Antipatterns","content":"Antipatterns","keywords":"","version":"Next"},{"title":"Responsibility","type":0,"sectionRef":"#","url":"/SFITDelivery-KnowledgeHub/docs/Roles/01_02_Delivery_Manager/01_02_02_Responsibility_Delivery_Manager","content":"Responsibility info The higher level inherits the responsibilities of the previous levels. Responsibility levels are not fixed. Duties can change depending on the project and company. It's important to consider the individual skills and experience of specialists. Grade\tJunior\tJunior+\tMiddle\tMiddle+\tSenior\tLeadProject Management and Lifecycle\tParticipation in project planning and initiation under the guidance of more experienced colleagues.Assisting in defining and controlling project timelines, budget, and resources.Performing simple tasks related to project planning and time management.\tIndependently performing some tasks related to planning and managing projects with limited complexity under supervision.Supporting monitoring and controlling project timelines, budget, and resources.Taking a more active role in planning and managing project timelines, including developing detailed plans and schedules.\tIndependently planning and managing projects from initiation to closure for projects of medium complexity.Controlling project timelines, budget, and resources.Full responsibility for planning and managing project timelines, including task coordination between teams.\tIndependently planning and managing most aspects of the project.Defining and controlling timelines, budget, and resources for complex projects.Communicating with clients and stakeholders.Solving complex tasks and conflicts.\tPlanning and managing large and complex projects from initiation to closure.Leading the project team.Full responsibility for strategic planning and timeline management, including developing long-term plans and strategies.\tLeading and strategically managing a portfolio of projects, including multi-component and cross-functional projects.Developing and implementing planning and timeline management strategies for the entire organization, including process optimization and best practice implementation. Coordination and Team Management\tSupporting team management under the guidance of more experienced managers.Participating in the professional development of team members.Performing simple tasks to track progress.\tIndependently performing some tasks related to forming and managing teams.Supporting efficient interaction between teams with minimal supervision.Actively participating in ensuring tasks are completed on time and within budget.\tIndependently forming and managing development, testing, and deployment teams.Ensuring effective interaction between teams for medium complexity projects.Full responsibility for the timely and budget-compliant completion of tasks by the team.Participating in the development and support of team members' professional growth.\tWorking on complex projects.Ensuring effective team collaboration and communication.Resolving conflicts and issues within the team.Mentoring and supporting team members.\tDeveloping and implementing team management strategies.Overseeing the execution of a project portfolio.Communicating with senior management.\tLeading the Delivery Manager team.Developing and implementing programs for professional skills development and career growth within the organization.Developing and implementing strategies for ensuring effective interaction between teams at the organizational level. Monitoring and Change Management in Project Environments\tSetting up basic dashboards and alerts based on provided configurations and templates.Assisting in developing and implementing change management strategies.Logging and escalating incidents.\tAnalyzing monitoring data to identify trends and potential problems.Proposing solutions to improve performance and stability of project environments.Participating in discussions and planning changes in project environments.\tDeveloping and implementing simple change management strategies.Setting up and optimizing monitoring systems for more accurate and effective performance tracking of project environments.Collaborating with DevOps and other technical teams to coordinate changes.\tImplementing new monitoring systems and ensuring their security.Ensuring the reliability of monitoring systems and their compliance with security standards.Coordinating and managing change processes to minimize disruptions and downtime.\tDeveloping and implementing a strategy for monitoring project environments and managing changes.Communicating with senior management.\tLeading the overall monitoring and change management system at the organizational level.Conducting strategic planning and development of monitoring and change management systems.Managing risks and responding to incidents at the organizational level. Quality Control and Risk Management\tSupporting adherence to quality standards at all project stages under the guidance of more experienced colleagues.Logging and escalating identified risks and issues.Participating in routine quality monitoring and reporting.\tAnalyzing quality data and metrics to identify potential problems and deviations.Participating in the development and implementation of quality management plans.Participating in internal quality audits and risk management.\tIndependently ensuring adherence to quality standards at all project stages.Developing and implementing quality control procedures and managing their execution.Managing simple project risks.Maintaining regular quality and risk reports, presenting reports to management.\tOptimizing existing quality control procedures and risk management to improve efficiency.Analyzing complex quality issues and risks, developing strategies to address them.\tDeveloping comprehensive quality control and risk management strategies for complex projects.Leading initiatives to enhance quality and mitigate risks across multiple projects.Reporting to senior management on quality and risk metrics.\tLeading organizational quality control and risk management efforts.Implementing enterprise-wide quality standards and risk mitigation strategies.Overseeing risk management and quality assurance programs across the organization.Engaging with executive leadership to align quality and risk objectives with business goals. Optimization and Automation of Delivery\tParticipating in basic tasks for automating delivery processes under the guidance of more experienced colleagues.Supporting the optimization of existing delivery processes to improve efficiency.Maintaining the reliability of processes.\tAnalyzing current delivery processes to identify opportunities for automation and optimization.Independently performing tasks related to the automation and optimization of delivery processes.Testing new automated processes.\tIndependently developing and implementing automated delivery processes.Optimizing processes to enhance their technical efficiency and reliability.Collaborating with development and operations support teams to coordinate automation initiatives.\tDeveloping, implementing, and optimizing complex automated processes.Evaluating and implementing best practices and standards of automation in delivery processes.Documenting automation and optimization processes.\tMaking key decisions on automation architecture and strategy.Leading large-scale projects for the automation and optimization of delivery processes.Developing and implementing automation and optimization strategies at the organizational level.\tOverseeing the execution of all projects.Communicating with senior management.Managing risks associated with the automation and optimization of delivery processes. Release Management, Strategy Development and Implementation\tParticipating in the setup and support of existing release processes and the use of Git.Logging and escalating issues related to releases and versions.\tIndependently performing some tasks related to developing release management strategies.Analyzing current release processes and the use of Git to identify improvement opportunities.Supporting the development and implementation of small improvements in release processes.\tDeveloping and implementing strategies for the use of Git and release processes to ensure efficient deployment of updates and new features.Developing, implementing, and optimizing simple release management strategies.Documenting release management processes.\tAnalyzing and resolving complex issues related to release processes and the use of Git.Managing communications with stakeholders regarding releases.Ensuring the integration of release processes with other organizational systems and tools.\tDeveloping and implementing organization-wide release management strategies.Implementing best practices and standards for release management.Making key decisions on release and Git strategy and architecture.\tOverseeing the execution of all projects.Communicating with senior management.Managing risks associated with releases and the use of Git. Project Progress Monitoring and Reporting\tPerforming routine tasks for data collection and project progress monitoring.Logging and escalating identified issues and deviations.Assisting in preparing project progress reports for stakeholders.\tIndependently performing some tasks related to project progress monitoring.Participating in discussions and providing suggestions for process improvements based on data analysis.\tRegularly monitoring project progress, including key performance indicators (KPIs).Independently preparing and presenting project progress reports to stakeholders.Analyzing project metrics and developing recommendations for process improvements and addressing identified issues.Documenting monitoring and reporting processes.\tDeveloping and implementing project progress monitoring systems to enhance accuracy and efficiency.Leading initiatives to improve monitoring and reporting processes.Analyzing complex issues and providing strategic recommendations to improve project performance.\tDeveloping and implementing organizational-level project progress monitoring strategies.Ensuring the integration of monitoring systems with other project management tools.Making key decisions regarding the structure and content of project progress reports.\tManaging large initiatives to improve monitoring and reporting processes.Communicating with senior management.Managing risks associated with project monitoring and reporting. Knowledge Management\tAssisting in collecting and documenting information for the project's knowledge base.Supporting the organization and updating of the knowledge base under the guidance of more experienced colleagues.\tIndependently creating and documenting simple project knowledge.Participating in the development of a knowledge management system.Participating in knowledge transfer processes within the team.\tCreating and maintaining a structured project knowledge base.Ensuring the documentation is up-to-date and accessible to all team members.Developing and implementing procedures for efficient knowledge storage and transfer within the team.Organizing regular training sessions and facilitating knowledge sharing among team members.\tImplementing best practices and technologies for knowledge management in the project.Analyzing complex knowledge management issues and developing solutions to address them.\tEvaluating and implementing advanced technologies and methods to improve knowledge management.Developing and implementing organization-wide knowledge management strategies.Ensuring the integration of knowledge management systems with other corporate systems.\tManaging large initiatives to improve knowledge management processes and their integration with other corporate systems.Overseeing the execution of all projects.Communicating with senior management. Communication and Feedback Management\tSupporting the collection and documentation of feedback from the team and the client.Logging and escalating identified issues and suggestions from the team and client.Assisting colleagues in ensuring communication among project participants.\tIndependently conducting simple meetings and sessions.Analyzing current communication processes and suggesting improvements.Participating in the development of an action plan for improvements.\tEnsuring regular and effective communication among all project participants.Independently collecting and analyzing feedback from the team and client.\tConducting deep analysis of complex issues related to communication and feedback, and developing solutions to address them.Documenting communication and feedback processes.Ensuring the integration of communication processes with other management and operational systems.\tLeading initiatives to improve communication processes and implementing changes based on feedback.Making key decisions regarding the structure and content of communication processes and systems.Evaluating and implementing advanced methods and technologies to enhance communication processes and feedback management.\tCommunicating with senior management.Ensuring regular analysis and reporting on the effectiveness of communication and implemented changes.Engaging in strategic planning and development of communication and feedback management systems at the organizational level.","keywords":"","version":"Next"},{"title":"Events","type":0,"sectionRef":"#","url":"/SFITDelivery-KnowledgeHub/docs/Useful materials/99_04_Events","content":"Events","keywords":"","version":"Next"},{"title":"Onboarding","type":0,"sectionRef":"#","url":"/SFITDelivery-KnowledgeHub/docs/Roles/01_03_Onboarding","content":"","keywords":"","version":"Next"},{"title":"DevOps​","type":1,"pageTitle":"Onboarding","url":"/SFITDelivery-KnowledgeHub/docs/Roles/01_03_Onboarding#devops","content":" Week\tTasks\tResult1\tMeet the team, stakeholders, gather project artifacts\tThe specialist met the team, studied the composition and roles, gained access to repositories, environments, documentation, and CI/CD pipelines. Familiarized with key project metrics 2-4\tStudy existing CI/CD pipelines, tools, and processes\tUnderstanding of current infrastructure and processes, setup of work environment, participation in deployments 5-8\tParticipate in automation and process optimization\tImprovements made to pipelines, participation in code reviews, scripting for automation 9-12\tConduct testing and system monitoring\tImplementation of test scenarios, setup of monitoring, working with logs 13-16\tWork on security and backup\tIntegration of security practices, setup of data and metadata backup 17-24\tDocumentation and training of teams and staff\tUpdating and creating documentation, conducting training sessions for teams on DevOps practices 25-32\tParticipate in release planning\tPlanning and coordinating releases, improving release processes, setting up Git strategy, coordinating changes considering stakeholder interests and project reliability 33-40\tInfrastructure optimization and support\tOptimization of infrastructure, participation in SRE practices, improvement of system performance 41-48\tLead process improvement initiatives\tManaging projects for process improvement, working with metrics, reporting to management  ","version":"Next","tagName":"h3"},{"title":"Delivery Manager​","type":1,"pageTitle":"Onboarding","url":"/SFITDelivery-KnowledgeHub/docs/Roles/01_03_Onboarding#delivery-manager","content":" Week\tTasks\tResult1\tGet acquainted with the team, and gather key team work artifacts\tThe team met with the manager, defined areas of responsibility, gained access to boards, knowledge base, and environments. Familiarized with key performance indicators (KPIs) and project metrics 2-4\tStudy current projects and processes, meet with stakeholders\tUnderstanding of current projects, studying documentation, participating in meetings, getting to know stakeholders, understanding the goals and objectives of current projects, familiarizing with solution architecture 5-8\tParticipate in project planning and management\tParticipating in planning, task prioritization, and scheduling, resource management 9-12\tOptimize processes and implement Agile practices\tImplementing and improving Agile processes, coordinating teams, establishing communication between teams, ensuring synchronization of team efforts, conducting retrospectives 13-16\tManage risks and quality\tIdentifying and managing risks, conducting internal quality audits, developing audit checklists, implementing improvements 17-24\tCommunication and reporting\tRegular reports for stakeholders, conducting and moderating meetings with the team and clients, improving communications, collecting and analyzing feedback 25-32\tChange management and process adaptation, training the team on new processes, monitoring the effectiveness of changes\tImplementing process changes, adapting to new requirements, coordinating changes across teams, assessing the impact of changes on the project, developing an adaptation plan 33-40\tTeam development and mentoring\tTraining and developing the team, conducting training sessions, providing support and mentorship for new team members 41-48\tStrategic planning and process improvement\tParticipating in strategic planning, developing long-term project development strategies, analyzing market trends, implementing best practices, improving project management processes, optimizing business processes ","version":"Next","tagName":"h3"},{"title":"Metrics and KPIs","type":0,"sectionRef":"#","url":"/SFITDelivery-KnowledgeHub/docs/Roles/01_04_Metrics_and_KPIs","content":"Metrics and KPIs info Properly selected metrics for a project allow for accurate and qualitative assessment of the project and its processes, leading to improvements. Incorrectly selected metrics, at best, will not help the project, and at worst, will lead to loss of control over the project. It is important not to seek a silver bullet or blindly copy others' metrics. This list displays the most commonly encountered basic metrics, their meanings, and areas of application. #\tName\tDescription and Notes\tDevOps\tDelivery Manager1\tDeployment Time\t- Description: The time taken to deploy a release or other change to the target environment or production. - Notes: It can be calculated separately for release deployments, other changes, and for selected environments.\t+ 2\tDeployment Frequency\t- Description: The number of deployments over a certain period (e.g., per week or month). - Notes: The usefulness of the metric depends on business requirements and project architecture. The most effective strategy is on-demand delivery.\t+ 3\tDeployment Success Rate (Change Failure Rate)\t- Description: The percentage of deployments that go without errors or failures. - Notes: The team should agree on what constitutes a failure. This metric helps assess project processes. Deployment Success Rate is the opposite of Change Failure Rate.\t+ 4\tMean Time to Recovery (MTTR)\t- Description: The average time required to restore the system after a failure. - Notes: An important aspect of this metric is recording the time of failure and determining when the failure is logged.\t+ 5\tIncident Response Time\t- Description: The time taken to respond to incidents from the moment they occur. - Notes: A measure of the team's effectiveness in responding to issues and incidents.\t+\t+ 6\tMean Time Between Failures (MTBF)\t- Description: The average time between failures, calculated as the operating time divided by the number of failures. - Notes: Helps identify architectural weaknesses and often works in conjunction with MTTR.\t+ 7\tTest Automation Coverage\t- Description: The proportion of automated tests out of the total number of tests. - Notes: Besides the automation ratio, it's important to consider the prioritization of cases.\t+ 8\tTest Coverage Percentage\t- Description: The assessment of code coverage by tests. - Notes: It is necessary to agree with the teams on the coverage percentage to be adopted in the project, usually ranging from 80% to 90%.\t+ 9\tStakeholders Satisfaction Rate\t- Description: The assessments of developers' and other CI/CD or end-to-end processes team members' satisfaction. - Notes: It is necessary to identify who the CI/CD and end-to-end processes stakeholders are in the project and to regularly work with their feedback.\t+\t+ 10\tFlow Efficiency\t- Description: The percentage of time during which work is actually performed compared to the total time a task spends in the process. - Notes: This metric is highly sensitive to CI/CD process automation and demonstrates the efficiency of end-to-end processes..\t+\t+ 11\tLead Time\t- Description: The time elapsed from task assignment to its deployment in production. - Notes: This metric serves as an indicator of process quality and helps identify bottlenecks slowing down delivery.\t+\t+ 12\tCycle Time\t- Description: The time taken from the start of task development to its delivery. - Notes: This metric indicates process quality and helps identify development and delivery bottlenecks slowing down work.\t+\t+ 13\tOn-time Delivery Rate\t- Description: The percentage of projects or tasks completed within the set deadlines. - Notes: An important indicator for assessing a manager's ability to manage timelines and adhere to schedules. + 14\tBudget Adherence\t- Description: The percentage of projects completed within the allocated budget. - Notes: An assessment of a manager's ability to effectively manage the project's financial resources. + 15\tDelivery Quality\t- Description: An assessment of the quality of the delivered product or service, based on customer feedback and the number of defects. - Notes: A key indicator of customer satisfaction with product quality. + 16\tCommunication Efficiency\t- Description: The level of team and customer satisfaction with communication efficiency. - Notes: An important aspect for ensuring transparency and coordination among all project participants. + 17\tRisk Management Efficiency\t- Description: An assessment of the effectiveness of risk management, including the number of identified and successfully mitigated risks. - Notes: Important for understanding how well the team can anticipate and manage potential problems. + 18\tResource Utilization Rate\t- Description: The percentage of available resources (human, technical, and financial) utilized in the project. - Notes: Helps determine how efficiently resources are being used. + 19\tScope Changes\t- Description: The number and impact of changes to the project's scope. - Notes: Important to monitor how frequently and significantly the project scope changes. + 20\tTeam Satisfaction\t- Description: The level of team members' satisfaction with the project and working conditions. - Notes: High team satisfaction contributes to improved productivity and reduced turnover. +","keywords":"","version":"Next"}],"options":{"id":"default"}}