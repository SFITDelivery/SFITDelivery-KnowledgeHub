"use strict";(self.webpackChunksfit_delivery_knowledge_hub=self.webpackChunksfit_delivery_knowledge_hub||[]).push([[987],{2025:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>u,frontMatter:()=>r,metadata:()=>a,toc:()=>d});var o=n(5893),s=n(1151);const r={sidebar_position:1,title:"Flows deletion",tags:["script","apex","bash","env"],sidebar_class_name:"disabled-page"},i="Mass Delete Unused Flow and Process Builder Versions in Salesforce",a={id:"Automatization/100_01_delete_flow",title:"Flows deletion",description:"Many people wonder how to remove inactive versions of Flow and Process Builder.",source:"@site/docs/100_Automatization/100_01_delete_flow.md",sourceDirName:"100_Automatization",slug:"/Automatization/100_01_delete_flow",permalink:"/SFITDelivery-KnowledgeHub/docs/Automatization/100_01_delete_flow",draft:!1,unlisted:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/100_Automatization/100_01_delete_flow.md",tags:[{label:"script",permalink:"/SFITDelivery-KnowledgeHub/docs/tags/script"},{label:"apex",permalink:"/SFITDelivery-KnowledgeHub/docs/tags/apex"},{label:"bash",permalink:"/SFITDelivery-KnowledgeHub/docs/tags/bash"},{label:"env",permalink:"/SFITDelivery-KnowledgeHub/docs/tags/env"}],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1,title:"Flows deletion",tags:["script","apex","bash","env"],sidebar_class_name:"disabled-page"},sidebar:"tutorialSidebar",previous:{title:"Automatization Index",permalink:"/SFITDelivery-KnowledgeHub/docs/Automatization/"}},l={},d=[{value:"Apex script",id:"apex-script",level:2},{value:"Bash Script (Using a File):",id:"bash-script-using-a-file",level:2}];function c(e){const t={a:"a",code:"code",h1:"h1",h2:"h2",p:"p",pre:"pre",strong:"strong",...(0,s.a)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(t.h1,{id:"mass-delete-unused-flow-and-process-builder-versions-in-salesforce",children:"Mass Delete Unused Flow and Process Builder Versions in Salesforce"}),"\n",(0,o.jsx)(t.p,{children:"Many people wonder how to remove inactive versions of Flow and Process Builder."}),"\n",(0,o.jsx)(t.p,{children:"I also faced this problem as deployments spread across the branch, and versions accumulated very quickly, especially in the integration environment."}),"\n",(0,o.jsx)(t.p,{children:"I hope this helps you."}),"\n",(0,o.jsxs)(t.p,{children:[(0,o.jsx)(t.strong,{children:"Note"}),": The URL is the address of your org. Version restrictions are made to not touch the old versions. You can upgrade the query as you like."]}),"\n",(0,o.jsx)(t.h2,{id:"apex-script",children:"Apex script"}),"\n",(0,o.jsx)(t.p,{children:(0,o.jsx)(t.a,{href:"../../../Scripts/apex/delete_flow.apex",children:"apex script"})}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-apex",children:"String soqlQuery = 'Select ID From Flow Where (Status =  \\'Obsolete\\' OR Status =  \\'Draft\\') AND VersionNumber > 1';\nString orgUrl = URL.getSalesforceBaseUrl().toExternalForm();\nHttpRequest flowIdRequest = new HttpRequest();\nflowIdRequest.setMethod('GET');\nflowIdRequest.setHeader('Authorization', 'Bearer ' + UserInfo.getSessionId());\nflowIdRequest.setEndpoint(orgUrl+'/services/data/v50.0/tooling/query?q=SELECT+id,status+FROM+Flow+Where+(+Status+=+\\'Obsolete\\'+OR+Status+=+\\'Draft\\'+)+AND+VersionNumber+>+1');\n//flowIdRequest.setTimeout(120000);\nHttp http = new Http();\nHttpResponse httpResponse = http.send(flowIdRequest);\nList<Object> records = (List<Object>)((Map<String, Object>)JSON.deserializeUntyped(httpResponse.getBody())).get('records');\n\n//get id\nString[] ids = new List<String>();\nfor (Object variable : records) {\n    String str = variable.ToString();\n    String res = str.substringBefore(', Status');\n    res = res.substringAfter('Id=');\n    ids.add(res);\n}\n//delete\nHttpRequest flowIdRequestDelete = new HttpRequest();\nfor (String idFlow : ids) {    \n    flowIdRequestDelete.setMethod('DELETE');\n    flowIdRequestDelete.setHeader('Authorization', 'Bearer ' + UserInfo.getSessionId());\n    flowIdRequestDelete.setEndpoint(orgUrl +'/services/data/v50.0/tooling/sobjects/Flow/'+idFlow);\n    Http http = new Http();\n    HttpResponse httpResponseDelete = http.send(flowIdRequestDelete);\n}\n"})}),"\n",(0,o.jsx)(t.h2,{id:"bash-script-using-a-file",children:"Bash Script (Using a File):"}),"\n",(0,o.jsx)(t.p,{children:(0,o.jsx)(t.a,{href:"../../../Scripts/bash/delete_flow.sh",children:"apex script"})}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-bash",children:'#!/bin/bash\n\norg=$1 # sandbox alias\nverMin=$2 # which version of the flow does the check start with\nverMaxDelta=$3 # how many versions of the flow will not be deleted counting from the active one\n\n# get the active version of the Active flow\necho "Request for Active flow versions"\nmapfile resultActive < <(sfdx force:data:soql:query --query "Select DefinitionId, VersionNumber From Flow Where Status =  \'Active\' AND VersionNumber > $verMin" --targetusername $org --usetoolingapi)\n\n<< RESULT\nthese first two lines are excluded:\nDEFINITIONID VERSIONNUMBER\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\nRESULT\nlet "a=${#resultActive[@]}-2"\n\n# get the active version of Obsolete and Draft flow\necho "Request for Inactive flow versions"\nmapfile resultInactive < <(sfdx force:data:soql:query --query "Select ID, DefinitionId, VersionNumber From Flow Where (Status =  \'Obsolete\' OR Status = \'Draft\') AND VersionNumber > $verMin " --targetusername $org --usetoolingapi)\nlet "b=${#resultInactive[@]}-2"\ndeclare -a flowsArr\necho "I\'m starting to process the lists"\nfor row in "${resultInactive[@]:2:$b}";do\n    IFS=\' \' read -ra flowInactiv <<< "$row" # we get a string divided into an array - Inactiv flow    \n    let "verInactiveFlow = ${flowInactiv[2]}" # the version of the inactive flow to check\n    for value in "${resultActive[@]:2:$a}";do\n        IFS=\' \' read -ra flowActiv <<< "$value" # we get a string divided into an array - Activ flow\n        let "verActiveFlowAndDelta = ${flowActiv[1]} - $verMaxDelta" # the version of the active flow with a delta for checking\n                \n        if [[ "${flowActiv[0]}" = "${flowInactiv[1]}" ]]\n        then\n            if (( $verInactiveFlow < $verActiveFlowAndDelta ))\n            then\n                echo "added for deletion ID " ${flowInactiv[0]}           \n                flowsArr+=( ${flowInactiv[0]} ) #add "Select ID" form Inactive flow  \n            fi          \n        fi     \n    done    \ndone\n\n# Delete flows\necho "deletion starts "\necho ${#flowsArr[@]} " flows are removed"\ncon=0\nfor flowDelete in "${flowsArr[@]}";do\n    con=$((con + 1))\n    sfdx force:data:record:delete --sobjecttype Flow --sobjectid $flowDelete --targetusername $org --usetoolingapi \n    echo "there are " $((${#flowsArr[@]}-$con)) " flows left"\ndone\n'})})]})}function u(e={}){const{wrapper:t}={...(0,s.a)(),...e.components};return t?(0,o.jsx)(t,{...e,children:(0,o.jsx)(c,{...e})}):c(e)}},1151:(e,t,n)=>{n.d(t,{Z:()=>a,a:()=>i});var o=n(7294);const s={},r=o.createContext(s);function i(e){const t=o.useContext(r);return o.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function a(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:i(e.components),o.createElement(r.Provider,{value:t},e.children)}}}]);