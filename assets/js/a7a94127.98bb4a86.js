"use strict";(self.webpackChunksfit_delivery_knowledge_hub=self.webpackChunksfit_delivery_knowledge_hub||[]).push([[4253],{7184:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>l,contentTitle:()=>r,default:()=>h,frontMatter:()=>a,metadata:()=>o,toc:()=>d});var t=s(5893),i=s(1151);const a={sidebar_position:2,title:"Trunk-Based Development (TBD)",tags:["Managment","Git","TBD"]},r=void 0,o={id:"Management/02_02_Git/02_02_02_TBD",title:"Trunk-Based Development (TBD)",description:"The Trunk-Based Development (TBD) strategy is applied in projects where the main values are release frequency and speed. It is characterized by frequent commits and merges into a single main branch. If feature branches are used, they exist for no longer than a few days or hours. Under this strategy, the main branch is always ready for deployment to production, although release branches may also be used. This approach is more often used in small teams due to the need for close interaction and good communication among developers, clear process organization, and discipline.",source:"@site/docs/02_Management/02_02_Git/02_02_02_TBD.md",sourceDirName:"02_Management/02_02_Git",slug:"/Management/02_02_Git/02_02_02_TBD",permalink:"/SFITDelivery-KnowledgeHub/docs/Management/02_02_Git/02_02_02_TBD",draft:!1,unlisted:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/02_Management/02_02_Git/02_02_02_TBD.md",tags:[{label:"Managment",permalink:"/SFITDelivery-KnowledgeHub/docs/tags/managment"},{label:"Git",permalink:"/SFITDelivery-KnowledgeHub/docs/tags/git"},{label:"TBD",permalink:"/SFITDelivery-KnowledgeHub/docs/tags/tbd"}],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2,title:"Trunk-Based Development (TBD)",tags:["Managment","Git","TBD"]},sidebar:"tutorialSidebar",previous:{title:"Git Strategies",permalink:"/SFITDelivery-KnowledgeHub/docs/Management/02_02_Git/02_02_01_Strategies"},next:{title:"Git Flow",permalink:"/SFITDelivery-KnowledgeHub/docs/Management/02_02_Git/02_02_03_Git_Flow"}},l={},d=[{value:"Implementation Examples",id:"implementation-examples",level:3},{value:"Advantages",id:"advantages",level:3},{value:"Disadvantages",id:"disadvantages",level:3},{value:"Features",id:"features",level:3},{value:"Ideal Project Profile",id:"ideal-project-profile",level:3}];function c(e){const n={h3:"h3",img:"img",li:"li",ol:"ol",p:"p",strong:"strong",...(0,i.a)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.p,{children:"The Trunk-Based Development (TBD) strategy is applied in projects where the main values are release frequency and speed. It is characterized by frequent commits and merges into a single main branch. If feature branches are used, they exist for no longer than a few days or hours. Under this strategy, the main branch is always ready for deployment to production, although release branches may also be used. This approach is more often used in small teams due to the need for close interaction and good communication among developers, clear process organization, and discipline."}),"\n",(0,t.jsx)(n.h3,{id:"implementation-examples",children:"Implementation Examples"}),"\n",(0,t.jsxs)(n.p,{children:["The strategy can use feature branches and release branches, but the key feature is a single main branch.\nThe example shows implementation scenarios:\n1 - without using additional branches\n2 - with feature branches\n3 - with feature branches and release branches\n",(0,t.jsx)(n.img,{src:s(4053).Z+"",width:"1602",height:"1434"})]}),"\n",(0,t.jsx)(n.h3,{id:"advantages",children:"Advantages"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Rapid Issue Identification and Resolution"}),": Frequent commits and configured automation allow for quick detection and resolution of issues, especially integration problems."]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Simplified Branch Management"}),": The absence of long-lived branches can simplify the code management process, reducing the likelihood of conflicts and merge errors."]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Improved Code Quality"}),": TBD is accompanied by the automation of CI/CD processes, including testing, which helps maintain a high standard of code quality since each change is automatically verified."]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Faster Feature Delivery"}),": Frequent releases allow for faster delivery of new features to users, improving time to market and customer satisfaction."]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Constant Deployment Readiness"}),": The main branch is always in a state ready for production deployment, which simplifies and speeds up the release process."]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Better Team Interaction"}),": The requirement for frequent commits and merges encourages the team to engage in more active interaction and coordination, improving teamwork."]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Enhanced Transparency"}),": All changes occur in one branch, making the development process more transparent and accessible to all team members."]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"disadvantages",children:"Disadvantages"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Scalability Issues"}),": In large teams with many developers, frequent commits to one branch can lead to numerous conflicts and merge complexities."]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Discipline and Process Requirements"}),": Successful TBD implementation requires high team discipline, well-organized processes, and a culture of continuous integration, which is not always easy to achieve."]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"High Automation Demands"}),": A good CI/CD system for automatic testing and deployment requires significant resources and time for setup and maintenance."]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Risk of Reduced Code Quality"}),": Fast and frequent integrations can lead to the inclusion of insufficiently tested or low-quality code if the review and testing processes are not strict enough."]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Potential Performance Issues"}),": Frequent merges can increase the load on the version control system and CI/CD infrastructure, potentially slowing down the integration and deployment process."]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Limited Experimentation Opportunities"}),": The absence of long-lived branches can limit opportunities for long-term experiments and major changes that require more time for development and testing."]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Complex Testing"}),": Feature flags are used to ensure that unfinished code does not interfere with the deployment of the main branch, which adds additional testing workload for different system configurations."]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"features",children:"Features"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Feature Flags"}),"\nThis development technique allows enabling or disabling features in an application without deploying new code. This is achieved by using conditional statements that check the flag's state and enable or disable the corresponding functionality."]}),"\n",(0,t.jsx)(n.h3,{id:"ideal-project-profile",children:"Ideal Project Profile"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Small to Medium Development Team"}),": With a small number of developers, it is easier to coordinate frequent commits and integrations, reducing the risk of conflicts and simplifying branch management."]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"High Level of Automation"}),": A reliable and well-configured continuous integration and deployment (CI/CD) system that automatically performs tests, checks, and deployments is critical for the success of TBD."]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Culture of Code Quality"}),": The team should adhere to high standards of code quality, regularly conduct code reviews, and ensure thorough testing before committing to the main branch."]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Effective Interaction and Communication"}),": The team should have well-established communication and interaction processes to quickly address issues and coordinate their actions."]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Short-Term Tasks"}),": Projects should be broken down into small, manageable tasks that can be completed within a few days or even hours to support frequent commits and integrations."]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Flexibility and Adaptability"}),": The development process should be flexible and able to quickly adapt to changing requirements and conditions, helping to respond promptly to feedback and make necessary adjustments."]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Version Control and Monitoring Tools"}),": Use of modern version control tools such as Git, as well as monitoring and performance analysis tools for timely issue detection and resolution."]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Management Support"}),": Leadership should support the implementation of TBD by providing the necessary resources and creating conditions for the team's effective work."]}),"\n"]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,i.a)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(c,{...e})}):c(e)}},4053:(e,n,s)=>{s.d(n,{Z:()=>t});const t=s.p+"assets/images/Git_TBD-da125cfd87ae5180da622a6501f19e3a.webp"},1151:(e,n,s)=>{s.d(n,{Z:()=>o,a:()=>r});var t=s(7294);const i={},a=t.createContext(i);function r(e){const n=t.useContext(a);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:r(e.components),t.createElement(a.Provider,{value:n},e.children)}}}]);