"use strict";(self.webpackChunksfit_delivery_knowledge_hub=self.webpackChunksfit_delivery_knowledge_hub||[]).push([[5220],{2853:e=>{e.exports=JSON.parse('{"label":"Releases","permalink":"/SFITDelivery-KnowledgeHub/docs/tags/releases","allTagsPath":"/SFITDelivery-KnowledgeHub/docs/tags","count":6,"items":[{"id":"Management/02_02_Git/02_02_03_Git_Flow","title":"Git Flow","description":"Git Flow is a popular branching strategy in Git, developed by Vincent Driessen link, for a structured development process. The main branches are main for production code and develop for integrating new features. Feature branches are created from develop and merged back after completion. Release branches prepare releases, merging into both main and develop. Hotfix branches are for urgent production code fixes and also merge into both main branches. This strategy supports parallel development, simplifies large project management, and minimizes conflicts.","permalink":"/SFITDelivery-KnowledgeHub/docs/Management/02_02_Git/02_02_03_Git_Flow"},{"id":"Management/02_01_Release/02_01_05_Large-scale_Projects","title":"Large-scale Projects","description":"Release management in large projects, which involve multiple teams and/or organizations, is a significant challenge. The success of implementing changes, system stability, and user satisfaction depends on proper coordination and management. Release management in such projects must include distinctive strategies and approaches to minimize risks and ensure the alignment of all participants\' actions.","permalink":"/SFITDelivery-KnowledgeHub/docs/Management/02_01_Release/02_01_05_Large-scale_Projects"},{"id":"Management/02_02_Git/02_02_07_Org_Branch","title":"Org Branch","description":"The Git Org Branch Strategy, where each branch corresponds to a specific environment (e.g., development, UAT, staging, production), is a useful concept for managing changes and deployments in corporate and large projects. This strategy is common in Salesforce projects due to licensing policies and environment setups that may not allow for full testing environments and limited use of Infrastructure as Code (IaC) approaches.","permalink":"/SFITDelivery-KnowledgeHub/docs/Management/02_02_Git/02_02_07_Org_Branch"},{"id":"Management/02_02_Git/02_02_05_Parallel_Releases","title":"Parallel Releases","description":"The Parallel Release Git strategy allows managing multiple versions of a product simultaneously. Separate release branches (release-x.x) are created for each release, enabling the preparation and testing of different product versions in parallel. Feature branches can be created from release-x.x branches, which serve as develop branches for the corresponding releases. This approach helps isolate changes and manage multiple product versions simultaneously, which is especially useful for projects with long development cycles and support for older versions. However, it requires strict branch management and synchronization of changes. An important feature is the designation of major and minor releases for their sequential synchronization.","permalink":"/SFITDelivery-KnowledgeHub/docs/Management/02_02_Git/02_02_05_Parallel_Releases"},{"id":"Management/02_03_Deployment/02_03_03_Release_Deployment","title":"Release Deployment","description":"","permalink":"/SFITDelivery-KnowledgeHub/docs/Management/02_03_Deployment/02_03_03_Release_Deployment"},{"id":"Management/02_01_Release/02_01_03_Release_on_Demand","title":"Release on Demand","description":"What is Release on Demand?","permalink":"/SFITDelivery-KnowledgeHub/docs/Management/02_01_Release/02_01_03_Release_on_Demand"}],"unlisted":false}')}}]);