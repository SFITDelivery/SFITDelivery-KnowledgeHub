"use strict";(self.webpackChunksfit_delivery_knowledge_hub=self.webpackChunksfit_delivery_knowledge_hub||[]).push([[1397],{4757:e=>{e.exports=JSON.parse('{"label":"Managment","permalink":"/SFITDelivery-KnowledgeHub/docs/tags/managment","allTagsPath":"/SFITDelivery-KnowledgeHub/docs/tags","count":35,"items":[{"id":"Management/02_04_Change/02_04_06_A_B_Testing","title":"A/B Testing","description":"","permalink":"/SFITDelivery-KnowledgeHub/docs/Management/02_04_Change/02_04_06_A_B_Testing"},{"id":"Management/02_01_Release/02_01_99_Anti_patterns","title":"Anti-patterns","description":"1. Lack of Unified Release Planning: Teams plan and execute releases independently without a unified roadmap or coordination.","permalink":"/SFITDelivery-KnowledgeHub/docs/Management/02_01_Release/02_01_99_Anti_patterns"},{"id":"Management/02_02_Git/02_02_99_Anti_patterns","title":"Anti-patterns","description":"1. Lack of Clear Structure and Documentation: Implementing Git strategies without clear documentation and structure can lead to chaos. Developers may not understand which branches to use and in what order to merge.","permalink":"/SFITDelivery-KnowledgeHub/docs/Management/02_02_Git/02_02_99_Anti_patterns"},{"id":"Management/02_03_Deployment/02_03_02_Automation_of_Deployment","title":"Automation of Deployment","description":"Deployment automation plays a critical role in modern approaches to software development and deployment, including platforms like Salesforce. It helps eliminate issues such as errors, delays, and inconsistencies between environments, thereby improving the development lifecycle and boosting team efficiency. A lack of automation can lead to a deteriorating work environment, increased costs, and reduced team productivity.","permalink":"/SFITDelivery-KnowledgeHub/docs/Management/02_03_Deployment/02_03_02_Automation_of_Deployment"},{"id":"Management/02_04_Change/02_04_04_Blue_Green","title":"Blue Green","description":"","permalink":"/SFITDelivery-KnowledgeHub/docs/Management/02_04_Change/02_04_04_Blue_Green"},{"id":"Management/02_02_Git/02_02_04_Org_Branch_Copado","title":"Copado Branching Strategy","description":"Copado Branching Strategy is recognized as an independent strategy due to its unique approach to building a Git strategy. This strategy is part of the change delivery process using the Copado tool. It involves the use of separate branches for each user story or feature and supports regular back-promotion to synchronize changes between branches.","permalink":"/SFITDelivery-KnowledgeHub/docs/Management/02_02_Git/02_02_04_Org_Branch_Copado"},{"id":"Management/02_04_Change/02_04_03_Dark_Launches","title":"Dark Launches","description":"","permalink":"/SFITDelivery-KnowledgeHub/docs/Management/02_04_Change/02_04_03_Dark_Launches"},{"id":"Management/02_06_Environments/02_06_03_Data_Backup","title":"Data Backup","description":"","permalink":"/SFITDelivery-KnowledgeHub/docs/Management/02_06_Environments/02_06_03_Data_Backup"},{"id":"Management/02_03_Deployment/02_03_03_Metadata_Deployment","title":"Deployment Options for Metadata","description":"The efficiency of delivering changes directly depends on the choice of code deployment methods to different environments. An incorrect choice can lead to excessive time and resource expenditures, slowing down the process, reducing efficiency, and increasing development costs.","permalink":"/SFITDelivery-KnowledgeHub/docs/Management/02_03_Deployment/02_03_03_Metadata_Deployment"},{"id":"Management/02_03_Deployment/02_03_05_Destructive_Change","title":"Destructive Change","description":"Destructive Changes refer to the process of removing outdated metadata (such as fields, objects, classes, pages, and other components) that are no longer needed in the target environment. This is important for maintaining system cleanliness and improving performance, as it helps eliminate unused or outdated components.","permalink":"/SFITDelivery-KnowledgeHub/docs/Management/02_03_Deployment/02_03_05_Destructive_Change"},{"id":"Management/02_07_Project/02_07_01_DevOps_Maturity_Matrix","title":"DevOps Maturity Matrix","description":"What Is It?","permalink":"/SFITDelivery-KnowledgeHub/docs/Management/02_07_Project/02_07_01_DevOps_Maturity_Matrix"},{"id":"Management/02_06_Environments/02_06_01_Environment_Monitoring","title":"Environment Monitoring","description":"","permalink":"/SFITDelivery-KnowledgeHub/docs/Management/02_06_Environments/02_06_01_Environment_Monitoring"},{"id":"Management/02_02_Git/02_02_08_Feature_Branch","title":"Feature Branch","description":"The Feature Branch strategy is an approach to branch management in version control systems where each new feature is developed in a separate branch originating from the main development branch (main, int, dev). This allows changes to be isolated and minimizes risks associated with integration.","permalink":"/SFITDelivery-KnowledgeHub/docs/Management/02_02_Git/02_02_08_Feature_Branch"},{"id":"Management/02_04_Change/02_04_01_Fundamentals_of_Change_Management","title":"Fundamentals of Change Management","description":"","permalink":"/SFITDelivery-KnowledgeHub/docs/Management/02_04_Change/02_04_01_Fundamentals_of_Change_Management"},{"id":"Management/02_03_Deployment/02_03_01_Fundamentals_of_Deployment","title":"Fundamentals of Deployment in Salesforce","description":"Deployment is an essential stage in the Software Development Lifecycle (SDLC), ensuring the delivery of a finished product to users. This process includes code transfer and environment setup and can be performed manually or automatically. A well-structured deployment process helps avoid errors, minimize implementation time, and ensure system stability.","permalink":"/SFITDelivery-KnowledgeHub/docs/Management/02_03_Deployment/02_03_01_Fundamentals_of_Deployment"},{"id":"Management/02_02_Git/02_02_03_Git_Flow","title":"Git Flow","description":"Git Flow is a popular branching strategy in Git, developed by Vincent Driessen link, for a structured development process. The main branches are main for production code and develop for integrating new features. Feature branches are created from develop and merged back after completion. Release branches prepare releases, merging into both main and develop. Hotfix branches are for urgent production code fixes and also merge into both main branches. This strategy supports parallel development, simplifies large project management, and minimizes conflicts.","permalink":"/SFITDelivery-KnowledgeHub/docs/Management/02_02_Git/02_02_03_Git_Flow"},{"id":"Management/02_02_Git/02_02_06_Fork_Strategy","title":"Git Fork Strategy","description":"The Fork Git Strategy is an approach to repository and branch management primarily used in open-source projects but can also be effectively applied in corporate projects. This strategy allows developers to work on a project without having direct access to the main repository. Instead, they create their own copies (forks) of the main repository and make changes to them. The Fork Git Strategy provides an excellent solution for isolating changes, enhancing security, and ensuring code quality, but it requires careful organization and management, especially in a corporate environment. This strategy is effective for projects with a large number of contributors and external contractors.","permalink":"/SFITDelivery-KnowledgeHub/docs/Management/02_02_Git/02_02_06_Fork_Strategy"},{"id":"Management/02_02_Git/02_02_01_Strategies","title":"Git Strategies","description":"Git is becoming an essential part of Salesforce projects, although some projects still rely on changesets for delivery.","permalink":"/SFITDelivery-KnowledgeHub/docs/Management/02_02_Git/02_02_01_Strategies"},{"id":"Management/02_01_Release/02_01_04_HotFix","title":"HotFix","description":"What is a Hotfix?","permalink":"/SFITDelivery-KnowledgeHub/docs/Management/02_01_Release/02_01_04_HotFix"},{"id":"Management/02_02_Git/02_02_09_HotFix","title":"HotFix","description":"The Hotfix Git Strategy aims to deliver fixes to the production environment as quickly and reliably as possible. The hotfix strategy is an integral part of the overall change management and deployment strategy adopted for the project.","permalink":"/SFITDelivery-KnowledgeHub/docs/Management/02_02_Git/02_02_09_HotFix"},{"id":"Management/02_04_Change/02_04_05_Incremental_Releases","title":"Incremental Releases","description":"","permalink":"/SFITDelivery-KnowledgeHub/docs/Management/02_04_Change/02_04_05_Incremental_Releases"},{"id":"Management/02_01_Release/02_01_05_Large-scale_Projects","title":"Large-scale Projects","description":"Release management in large projects, which involve multiple teams and/or organizations, is a significant challenge. The success of implementing changes, system stability, and user satisfaction depends on proper coordination and management. Release management in such projects must include distinctive strategies and approaches to minimize risks and ensure the alignment of all participants\' actions.","permalink":"/SFITDelivery-KnowledgeHub/docs/Management/02_01_Release/02_01_05_Large-scale_Projects"},{"id":"Management/02_06_Environments/02_06_02_Metadata_Backup","title":"Metadata Backup","description":"","permalink":"/SFITDelivery-KnowledgeHub/docs/Management/02_06_Environments/02_06_02_Metadata_Backup"},{"id":"Management/02_02_Git/02_02_07_Org_Branch","title":"Org Branch","description":"The Git Org Branch Strategy, where each branch corresponds to a specific environment (e.g., development, UAT, staging, production), is a useful concept for managing changes and deployments in corporate and large projects. This strategy is common in Salesforce projects due to licensing policies and environment setups that may not allow for full testing environments and limited use of Infrastructure as Code (IaC) approaches.","permalink":"/SFITDelivery-KnowledgeHub/docs/Management/02_02_Git/02_02_07_Org_Branch"},{"id":"Management/02_02_Git/02_02_05_Parallel_Releases","title":"Parallel Releases","description":"The Parallel Release Git strategy allows managing multiple versions of a product simultaneously. Separate release branches (release-x.x) are created for each release, enabling the preparation and testing of different product versions in parallel. Feature branches can be created from release-x.x branches, which serve as develop branches for the corresponding releases. This approach helps isolate changes and manage multiple product versions simultaneously, which is especially useful for projects with long development cycles and support for older versions. However, it requires strict branch management and synchronization of changes. An important feature is the designation of major and minor releases for their sequential synchronization.","permalink":"/SFITDelivery-KnowledgeHub/docs/Management/02_02_Git/02_02_05_Parallel_Releases"},{"id":"Management/02_04_Change/02_04_02_Phased_Rollouts","title":"Phased Rollouts","description":"","permalink":"/SFITDelivery-KnowledgeHub/docs/Management/02_04_Change/02_04_02_Phased_Rollouts"},{"id":"Management/02_03_Deployment/02_03_06_Quick_Deployment","title":"Quick Deploy","description":"Quick Deploy is a Salesforce feature that speeds up the deployment process if validation with necessary test (unit tests) execution has been successfully completed beforehand. Quick Deploy is useful in situations where deployment needs to be performed at a specific time, minimizing the cost of re-testing, as testing was completed during validation. This method enables preparation for deployment in advance by validating changes, allowing deployment within a specific time window (e.g., to minimize business disruption or synchronize deployment with other events).","permalink":"/SFITDelivery-KnowledgeHub/docs/Management/02_03_Deployment/02_03_06_Quick_Deployment"},{"id":"Management/02_01_Release/02_01_01_Release_Management","title":"Release Management","description":"In today\u2019s environment, businesses demand flexibility, speed, and precision from IT departments when implementing new features and updates. Release management is the process aimed at ensuring the stability and quality of deployed changes.","permalink":"/SFITDelivery-KnowledgeHub/docs/Management/02_01_Release/02_01_01_Release_Management"},{"id":"Management/02_01_Release/02_01_03_Release_on_Demand","title":"Release on Demand","description":"What is Release on Demand?","permalink":"/SFITDelivery-KnowledgeHub/docs/Management/02_01_Release/02_01_03_Release_on_Demand"},{"id":"Management/02_01_Release/02_01_02_Release_Planning","title":"Release Planning","description":"Release planning is a critically important stage in managing any IT project. The quality of release planning determines the success of implementing changes, the stability of the system, and user satisfaction.","permalink":"/SFITDelivery-KnowledgeHub/docs/Management/02_01_Release/02_01_02_Release_Planning"},{"id":"Management/02_03_Deployment/02_03_04_Run_Tests_for_Deployment","title":"Run Tests for Deployment","description":"Effective testing is crucial to ensuring the quality of deployed changes. Choosing the right approach for test execution helps optimize time and resource costs while minimizing risks associated with potential errors. This article examines two main approaches to test execution during deployment: running all tests (RunLocalTests) and running specific tests (RunSpecifiedTests). Each approach has its advantages and disadvantages, and the choice depends on the project\u2019s current goals and CI/CD strategy.","permalink":"/SFITDelivery-KnowledgeHub/docs/Management/02_03_Deployment/02_03_04_Run_Tests_for_Deployment"},{"id":"Management/02_03_Deployment/02_03_09_Test_Coverage_Matrix","title":"Test Coverage Matrix","description":"The Test Coverage Matrix is a tool that tracks the relationship between test classes and the classes they cover, along with additional information such as coverage percentage, the date of the last test run, and comments. It is a vital tool for managing code quality, providing simplified access to test coverage data, and enabling change tracking.","permalink":"/SFITDelivery-KnowledgeHub/docs/Management/02_03_Deployment/02_03_09_Test_Coverage_Matrix"},{"id":"Management/02_02_Git/02_02_02_TBD","title":"Trunk-Based Development (TBD)","description":"The Trunk-Based Development (TBD) strategy is applied in projects where the main values are release frequency and speed. It is characterized by frequent commits and merges into a single main branch. If feature branches are used, they exist for no longer than a few days or hours. Under this strategy, the main branch is always ready for deployment to production, although release branches may also be used. This approach is more often used in small teams due to the need for close interaction and good communication among developers, clear process organization, and discipline.","permalink":"/SFITDelivery-KnowledgeHub/docs/Management/02_02_Git/02_02_02_TBD"},{"id":"Management/02_03_Deployment/02_03_07_Packages","title":"Types of Packages in Salesforce","description":"Unlocked Package \u2014 used for modular development, allowing developers to update, modify, and version packages for dependency management. Frequently utilized for internal development, it supports full CI/CD automation and enables a flexible approach to delivering solutions to users.","permalink":"/SFITDelivery-KnowledgeHub/docs/Management/02_03_Deployment/02_03_07_Packages"},{"id":"Management/02_03_Deployment/02_03_08_Unlocked_Packages","title":"Unlocked Packages","description":"Unlocked Packages are a type of package in Salesforce designed to enhance flexibility and modularity in application deployment. Unlike traditional deployment methods, unlocked packages* support versioning, modularity, and simplified dependency management. These packages are especially valuable for large projects and organizations with distributed environments where automation and version control are essential.","permalink":"/SFITDelivery-KnowledgeHub/docs/Management/02_03_Deployment/02_03_08_Unlocked_Packages"}],"unlisted":false}')}}]);